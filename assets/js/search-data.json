{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://arpitsolanki.github.io/fastpagetest/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "import os import pandas as pd import requests import json import numpy as np import plotly.express as px import plotly.graph_objects as go from plotly.subplots import make_subplots import xgboost as xgboost import datetime from sklearn.model_selection import train_test_split #Splitting data for model training from sklearn.ensemble import RandomForestClassifier #RF from sklearn.preprocessing import LabelEncoder#Label Encoder from sklearn.preprocessing import OneHotEncoder#One Hot Encoder from sklearn.metrics import confusion_matrix#Confusion Matrix from sklearn.metrics import roc_curve#RoC Curve from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve#Metrics Functions . GW=22 #Fantasy API Calls to pull historic player stats url = &#39;https://fantasy.premierleague.com/api/bootstrap-static/&#39; response = requests.get(url) response = json.loads(response.content) #Fixtures for upcoming game weeks fix_url = &#39;https://fantasy.premierleague.com/api/fixtures?event=&#39;+str(GW) fix_response = requests.get(fix_url) fix_response = json.loads(fix_response.content) . def get(url): response = requests.get(url) return json.loads(response.content) . players = response[&#39;elements&#39;] teams = response[&#39;teams&#39;] events = response[&#39;events&#39;] #fixtures = fix_response[&#39;fixtures&#39;] players_df = pd.DataFrame(players) teams_df = pd.DataFrame(teams) events_df = pd.DataFrame(events) fixtures_df=pd.DataFrame(fix_response) players_df . chance_of_playing_next_round chance_of_playing_this_round code cost_change_event cost_change_event_fall cost_change_start cost_change_start_fall dreamteam_count element_type ep_next ep_this event_points first_name form id in_dreamteam news news_added now_cost photo points_per_game second_name selected_by_percent special squad_number status team team_code total_points transfers_in transfers_in_event transfers_out transfers_out_event value_form value_season web_name minutes goals_scored assists clean_sheets goals_conceded own_goals penalties_saved penalties_missed yellow_cards red_cards saves bonus bps influence creativity threat ict_index influence_rank influence_rank_type creativity_rank creativity_rank_type threat_rank threat_rank_type ict_index_rank ict_index_rank_type corners_and_indirect_freekicks_order corners_and_indirect_freekicks_text direct_freekicks_order direct_freekicks_text penalties_order penalties_text . 0 0.0 | 0.0 | 37605 | 0 | 0 | -3 | 3 | 0 | 3 | 0.0 | 0.0 | 0 | Mesut | 0.0 | 1 | False | Not included in Arsenal&#39;s 25-man Premier Leagu... | 2020-10-20T22:30:18.118477Z | 67 | 37605.jpg | 0.0 | Özil | 0.5 | False | None | u | 1 | 3 | 0 | 3441 | 0 | 53856 | 82 | 0.0 | 0.0 | Özil | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 650 | 262 | 650 | 262 | 650 | 262 | 650 | 262 | NaN | | NaN | | NaN | | . 1 0.0 | 0.0 | 39476 | 0 | 0 | -2 | 2 | 0 | 2 | 0.0 | 0.0 | 0 | Sokratis | 0.0 | 2 | False | Left the club by mutual consent on 20/1 | 2020-10-21T10:30:18.546407Z | 48 | 39476.jpg | 0.0 | Papastathopoulos | 0.1 | False | None | u | 1 | 3 | 0 | 10266 | 0 | 18978 | 10 | 0.0 | 0.0 | Sokratis | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 607 | 221 | 598 | 221 | 591 | 219 | 610 | 221 | NaN | | NaN | | NaN | | . 2 100.0 | 100.0 | 41270 | 0 | 0 | -1 | 1 | 0 | 2 | 5.3 | 4.8 | 6 | David | 4.8 | 3 | False | | 2020-12-26T18:00:15.638627Z | 54 | 41270.jpg | 2.3 | Luiz Moreira Marinho | 0.8 | False | None | a | 1 | 3 | 28 | 48380 | 3827 | 94758 | 660 | 0.9 | 5.2 | David Luiz | 839 | 0 | 0 | 3 | 10 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 143 | 132.8 | 30.4 | 86.0 | 24.9 | 256 | 98 | 318 | 106 | 212 | 58 | 289 | 98 | NaN | | 4.0 | | NaN | | . 3 75.0 | 50.0 | 54694 | 0 | 0 | -7 | 7 | 1 | 3 | 3.8 | 2.2 | 0 | Pierre-Emerick | 4.5 | 4 | False | Lack of match fitness - 75% chance of playing | 2021-01-23T16:00:22.555453Z | 113 | 54694.jpg | 4.2 | Aubameyang | 6.5 | False | None | d | 1 | 3 | 71 | 562692 | 1665 | 3258367 | 9740 | 0.4 | 6.3 | Aubameyang | 1514 | 5 | 1 | 7 | 16 | 1 | 0 | 0 | 2 | 0 | 0 | 6 | 202 | 272.2 | 226.3 | 519.0 | 101.8 | 133 | 51 | 80 | 57 | 27 | 14 | 42 | 28 | NaN | | NaN | | 1.0 | | . 4 100.0 | 100.0 | 58822 | 0 | 0 | -4 | 4 | 0 | 2 | 5.3 | 4.8 | 5 | Cédric | 4.8 | 5 | False | | 2020-09-23T09:00:14.881983Z | 46 | 58822.jpg | 5.0 | Soares | 0.3 | False | None | a | 1 | 3 | 20 | 14320 | 5333 | 37197 | 495 | 1.0 | 4.3 | Cédric | 275 | 0 | 1 | 2 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 3 | 71 | 53.6 | 65.7 | 10.0 | 12.9 | 354 | 139 | 240 | 58 | 373 | 140 | 349 | 125 | NaN | | NaN | | NaN | | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 645 NaN | NaN | 448487 | 0 | 0 | 0 | 0 | 0 | 1 | -0.5 | 0.0 | 0 | Andreas | 0.0 | 617 | False | | None | 40 | 448487.jpg | 0.0 | Söndergaard | 0.3 | False | None | a | 20 | 39 | 0 | 25127 | 1863 | 6802 | 841 | 0.0 | 0.0 | Söndergaard | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 503 | 53 | 485 | 28 | 460 | 23 | 511 | 53 | NaN | | NaN | | NaN | | . 646 0.0 | NaN | 209353 | 0 | 0 | -1 | 1 | 0 | 4 | 0.0 | 0.5 | 0 | Patrick | 0.5 | 626 | False | Joined Valencia on loan until the end of the s... | 2021-01-31T20:00:27.142575Z | 59 | 209353.jpg | 1.0 | Cutrone | 0.0 | False | None | u | 20 | 39 | 2 | 3443 | 70 | 2779 | 390 | 0.1 | 0.3 | Cutrone | 23 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 5 | 0.0 | 0.0 | 4.0 | 0.2 | 644 | 81 | 645 | 82 | 398 | 61 | 470 | 63 | NaN | | NaN | | NaN | | . 647 NaN | NaN | 465551 | 0 | 0 | 0 | 0 | 0 | 2 | -0.5 | 0.0 | 0 | Nigel | 0.0 | 629 | False | | None | 40 | 465551.jpg | 0.0 | Lonwijk | 0.0 | False | None | a | 20 | 39 | 0 | 782 | 61 | 316 | 82 | 0.0 | 0.0 | Lonwijk | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 506 | 195 | 488 | 195 | 463 | 181 | 514 | 195 | NaN | | NaN | | NaN | | . 648 100.0 | 100.0 | 73314 | 0 | 0 | 0 | 0 | 0 | 4 | 1.0 | 1.5 | 2 | Willian José | 1.5 | 642 | False | | 2021-01-26T14:00:25.113370Z | 70 | 73314.jpg | 1.5 | Da Silva | 0.2 | False | None | a | 20 | 39 | 3 | 14442 | 4740 | 2813 | 1510 | 0.2 | 0.4 | Willian José | 108 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 6 | 13.0 | 2.2 | 60.0 | 7.5 | 424 | 48 | 417 | 59 | 261 | 49 | 381 | 51 | NaN | | NaN | | NaN | | . 649 NaN | NaN | 490721 | 0 | 0 | 0 | 0 | 0 | 2 | 0.7 | 1.2 | 0 | Hugo | 0.0 | 649 | False | | None | 40 | 490721.jpg | 0.0 | Bueno | 0.0 | False | None | a | 20 | 39 | 0 | 80 | 80 | 12 | 12 | 0.0 | 0.0 | Bueno | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 510 | 199 | 492 | 199 | 467 | 185 | 518 | 199 | NaN | | NaN | | NaN | | . 650 rows × 67 columns . . spi_data = pd.read_csv(&#39;https://projects.fivethirtyeight.com/soccer-api/club/spi_matches_latest.csv&#39;) spi_data=spi_data.loc[(spi_data[&#39;season&#39;]==2020) &amp; (spi_data[&#39;league&#39;]==&#39;Barclays Premier League&#39;)] #spi_data #Team mapping file team_mapping_spi=pd.read_csv(&#39;https://raw.githubusercontent.com/arpitsolanki/FPLBot/main/team_mapping.csv&#39;) #team_mapping_spi #Add team_ids to the 538 dataset to make it compatible with FPL API datasets spi_data_name=pd.merge(left=spi_data,right=team_mapping_spi,how=&#39;inner&#39;,left_on=&#39;team1&#39;,right_on=&#39;team&#39;) spi_data_name=spi_data_name.rename(columns={&quot;id&quot;: &quot;team1_id&quot;}) spi_data_name=pd.merge(left=spi_data_name,right=team_mapping_spi,how=&#39;inner&#39;,left_on=&#39;team2&#39;,right_on=&#39;team&#39;) spi_data_name=spi_data_name.rename(columns={&quot;id&quot;: &quot;team2_id&quot;}) #spi_data_name . players_df . chance_of_playing_next_round chance_of_playing_this_round code cost_change_event cost_change_event_fall cost_change_start cost_change_start_fall dreamteam_count element_type ep_next ep_this event_points first_name form id in_dreamteam news news_added now_cost photo points_per_game second_name selected_by_percent special squad_number status team team_code total_points transfers_in transfers_in_event transfers_out transfers_out_event value_form value_season web_name minutes goals_scored assists clean_sheets goals_conceded own_goals penalties_saved penalties_missed yellow_cards red_cards saves bonus bps influence creativity threat ict_index influence_rank influence_rank_type creativity_rank creativity_rank_type threat_rank threat_rank_type ict_index_rank ict_index_rank_type corners_and_indirect_freekicks_order corners_and_indirect_freekicks_text direct_freekicks_order direct_freekicks_text penalties_order penalties_text . 0 0.0 | 0.0 | 37605 | 0 | 0 | -3 | 3 | 0 | 3 | 0.0 | 0.0 | 0 | Mesut | 0.0 | 1 | False | Not included in Arsenal&#39;s 25-man Premier Leagu... | 2020-10-20T22:30:18.118477Z | 67 | 37605.jpg | 0.0 | Özil | 0.5 | False | None | u | 1 | 3 | 0 | 3441 | 0 | 53856 | 82 | 0.0 | 0.0 | Özil | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 650 | 262 | 650 | 262 | 650 | 262 | 650 | 262 | NaN | | NaN | | NaN | | . 1 0.0 | 0.0 | 39476 | 0 | 0 | -2 | 2 | 0 | 2 | 0.0 | 0.0 | 0 | Sokratis | 0.0 | 2 | False | Left the club by mutual consent on 20/1 | 2020-10-21T10:30:18.546407Z | 48 | 39476.jpg | 0.0 | Papastathopoulos | 0.1 | False | None | u | 1 | 3 | 0 | 10266 | 0 | 18978 | 10 | 0.0 | 0.0 | Sokratis | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 607 | 221 | 598 | 221 | 591 | 219 | 610 | 221 | NaN | | NaN | | NaN | | . 2 100.0 | 100.0 | 41270 | 0 | 0 | -1 | 1 | 0 | 2 | 5.3 | 4.8 | 6 | David | 4.8 | 3 | False | | 2020-12-26T18:00:15.638627Z | 54 | 41270.jpg | 2.3 | Luiz Moreira Marinho | 0.8 | False | None | a | 1 | 3 | 28 | 48380 | 3827 | 94758 | 660 | 0.9 | 5.2 | David Luiz | 839 | 0 | 0 | 3 | 10 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 143 | 132.8 | 30.4 | 86.0 | 24.9 | 256 | 98 | 318 | 106 | 212 | 58 | 289 | 98 | NaN | | 4.0 | | NaN | | . 3 75.0 | 50.0 | 54694 | 0 | 0 | -7 | 7 | 1 | 3 | 3.8 | 2.2 | 0 | Pierre-Emerick | 4.5 | 4 | False | Lack of match fitness - 75% chance of playing | 2021-01-23T16:00:22.555453Z | 113 | 54694.jpg | 4.2 | Aubameyang | 6.5 | False | None | d | 1 | 3 | 71 | 562692 | 1665 | 3258367 | 9740 | 0.4 | 6.3 | Aubameyang | 1514 | 5 | 1 | 7 | 16 | 1 | 0 | 0 | 2 | 0 | 0 | 6 | 202 | 272.2 | 226.3 | 519.0 | 101.8 | 133 | 51 | 80 | 57 | 27 | 14 | 42 | 28 | NaN | | NaN | | 1.0 | | . 4 100.0 | 100.0 | 58822 | 0 | 0 | -4 | 4 | 0 | 2 | 5.3 | 4.8 | 5 | Cédric | 4.8 | 5 | False | | 2020-09-23T09:00:14.881983Z | 46 | 58822.jpg | 5.0 | Soares | 0.3 | False | None | a | 1 | 3 | 20 | 14320 | 5333 | 37197 | 495 | 1.0 | 4.3 | Cédric | 275 | 0 | 1 | 2 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 3 | 71 | 53.6 | 65.7 | 10.0 | 12.9 | 354 | 139 | 240 | 58 | 373 | 140 | 349 | 125 | NaN | | NaN | | NaN | | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 645 NaN | NaN | 448487 | 0 | 0 | 0 | 0 | 0 | 1 | -0.5 | 0.0 | 0 | Andreas | 0.0 | 617 | False | | None | 40 | 448487.jpg | 0.0 | Söndergaard | 0.3 | False | None | a | 20 | 39 | 0 | 25127 | 1863 | 6802 | 841 | 0.0 | 0.0 | Söndergaard | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 503 | 53 | 485 | 28 | 460 | 23 | 511 | 53 | NaN | | NaN | | NaN | | . 646 0.0 | NaN | 209353 | 0 | 0 | -1 | 1 | 0 | 4 | 0.0 | 0.5 | 0 | Patrick | 0.5 | 626 | False | Joined Valencia on loan until the end of the s... | 2021-01-31T20:00:27.142575Z | 59 | 209353.jpg | 1.0 | Cutrone | 0.0 | False | None | u | 20 | 39 | 2 | 3443 | 70 | 2779 | 390 | 0.1 | 0.3 | Cutrone | 23 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 5 | 0.0 | 0.0 | 4.0 | 0.2 | 644 | 81 | 645 | 82 | 398 | 61 | 470 | 63 | NaN | | NaN | | NaN | | . 647 NaN | NaN | 465551 | 0 | 0 | 0 | 0 | 0 | 2 | -0.5 | 0.0 | 0 | Nigel | 0.0 | 629 | False | | None | 40 | 465551.jpg | 0.0 | Lonwijk | 0.0 | False | None | a | 20 | 39 | 0 | 782 | 61 | 316 | 82 | 0.0 | 0.0 | Lonwijk | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 506 | 195 | 488 | 195 | 463 | 181 | 514 | 195 | NaN | | NaN | | NaN | | . 648 100.0 | 100.0 | 73314 | 0 | 0 | 0 | 0 | 0 | 4 | 1.0 | 1.5 | 2 | Willian José | 1.5 | 642 | False | | 2021-01-26T14:00:25.113370Z | 70 | 73314.jpg | 1.5 | Da Silva | 0.2 | False | None | a | 20 | 39 | 3 | 14442 | 4740 | 2813 | 1510 | 0.2 | 0.4 | Willian José | 108 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 6 | 13.0 | 2.2 | 60.0 | 7.5 | 424 | 48 | 417 | 59 | 261 | 49 | 381 | 51 | NaN | | NaN | | NaN | | . 649 NaN | NaN | 490721 | 0 | 0 | 0 | 0 | 0 | 2 | 0.7 | 1.2 | 0 | Hugo | 0.0 | 649 | False | | None | 40 | 490721.jpg | 0.0 | Bueno | 0.0 | False | None | a | 20 | 39 | 0 | 80 | 80 | 12 | 12 | 0.0 | 0.0 | Bueno | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 510 | 199 | 492 | 199 | 467 | 185 | 518 | 199 | NaN | | NaN | | NaN | | . 650 rows × 67 columns . players_df_filtered=players_df[[&#39;web_name&#39;,&#39;element_type&#39;,&#39;now_cost&#39;,&#39;selected_by_percent&#39;,&#39;points_per_game&#39;,&#39;team&#39;,&#39;total_points&#39;,&#39;minutes&#39;,&#39;goals_scored&#39;,&#39;assists&#39;,&#39;clean_sheets&#39;,&#39;goals_conceded&#39;,&#39;yellow_cards&#39;,&#39;red_cards&#39;,&#39;bonus&#39;,&#39;chance_of_playing_next_round&#39;]] players_df_filtered=players_df_filtered.loc[players_df_filtered[&#39;minutes&#39;]&gt;300] players_df_filtered[&#39;now_cost_mil&#39;]=players_df_filtered[&#39;now_cost&#39;]/10 players_df_filtered[&#39;ppm&#39;]=players_df_filtered[&#39;total_points&#39;]/players_df_filtered[&#39;now_cost_mil&#39;] players_df_filtered.sort_values(by=&#39;ppm&#39;,ascending=False,inplace=True) . . teams_df_filtered=teams_df[[&#39;id&#39;,&#39;name&#39;,&#39;short_name&#39;,&#39;played&#39;,&#39;points&#39;,&#39;position&#39;,&#39;win&#39;,&#39;draw&#39;,&#39;loss&#39;]] teams_df_filtered_join=teams_df[[&#39;id&#39;,&#39;name&#39;]] . fixtures_df_name=pd.merge(left=fixtures_df,right=teams_df_filtered_join,left_on=&#39;team_a&#39;,right_on=&#39;id&#39;,how=&#39;left&#39;) fixtures_df_name=fixtures_df_name.rename(columns={&quot;name&quot;: &quot;away_team&quot;}) fixtures_df_name=pd.merge(left=fixtures_df_name,right=teams_df_filtered_join,left_on=&#39;team_h&#39;,right_on=&#39;id&#39;,how=&#39;left&#39;) fixtures_df_name=fixtures_df_name.rename(columns={&quot;name&quot;: &quot;home_team&quot;}) fixtures_df_name . code event finished finished_provisional id_x kickoff_time minutes provisional_start_time started team_a team_a_score team_h team_h_score stats team_h_difficulty team_a_difficulty pulse_id id_y away_team id home_team . 0 2128501 | 22 | False | False | 214 | 2021-02-02T18:00:00Z | 0 | False | False | 18 | None | 15 | None | [] | 2 | 2 | 59111 | 18 | West Brom | 15 | Sheffield Utd | . 1 2128502 | 22 | False | False | 215 | 2021-02-02T18:00:00Z | 0 | False | False | 1 | None | 20 | None | [] | 3 | 3 | 59112 | 1 | Arsenal | 20 | Wolves | . 2 2128500 | 22 | False | False | 213 | 2021-02-02T20:15:00Z | 0 | False | False | 16 | None | 13 | None | [] | 3 | 4 | 59110 | 16 | Southampton | 13 | Man Utd | . 3 2128504 | 22 | False | False | 217 | 2021-02-02T20:15:00Z | 0 | False | False | 6 | None | 14 | None | [] | 3 | 3 | 59114 | 6 | Crystal Palace | 14 | Newcastle | . 4 2128497 | 22 | False | False | 210 | 2021-02-03T18:00:00Z | 0 | False | False | 12 | None | 4 | None | [] | 4 | 2 | 59107 | 12 | Man City | 4 | Burnley | . 5 2128498 | 22 | False | False | 211 | 2021-02-03T18:00:00Z | 0 | False | False | 9 | None | 8 | None | [] | 4 | 2 | 59108 | 9 | Leicester | 8 | Fulham | . 6 2128499 | 22 | False | False | 212 | 2021-02-03T19:30:00Z | 0 | False | False | 7 | None | 10 | None | [] | 3 | 3 | 59109 | 7 | Everton | 10 | Leeds | . 7 2128496 | 22 | False | False | 209 | 2021-02-03T20:15:00Z | 0 | False | False | 19 | None | 2 | None | [] | 3 | 3 | 59106 | 19 | West Ham | 2 | Aston Villa | . 8 2128503 | 22 | False | False | 216 | 2021-02-03T20:15:00Z | 0 | False | False | 3 | None | 11 | None | [] | 2 | 5 | 59113 | 3 | Brighton | 11 | Liverpool | . 9 2128505 | 22 | False | False | 218 | 2021-02-04T20:00:00Z | 0 | False | False | 5 | None | 17 | None | [] | 4 | 4 | 59115 | 5 | Chelsea | 17 | Spurs | . df_l=[] for i in range(GW): fix_url = &#39;https://fantasy.premierleague.com/api/fixtures?event=&#39;+str(i+1) fix_response = requests.get(fix_url) fix_response = json.loads(fix_response.content) fixtures_df=pd.DataFrame(fix_response) fixtures_df[&#39;gw&#39;]=i+1 df_l.append(fixtures_df) # print(fix_url) fixtures_df = pd.concat(df_l, axis=0, ignore_index=True) fixtures_df_map=fixtures_df[[&#39;gw&#39;,&#39;kickoff_time&#39;]].copy() fixtures_df_map[&#39;date&#39;]=pd.to_datetime(fixtures_df_map[&#39;kickoff_time&#39;], errors=&#39;coerce&#39;).dt.date del fixtures_df_map[&#39;kickoff_time&#39;] fixtures_df_map=fixtures_df_map.drop_duplicates() #fixtures_df_map . fixtures_df_name_cur_gw=fixtures_df_name[[&#39;home_team&#39;,&#39;away_team&#39;,&#39;id&#39;,&#39;id_y&#39;]] fixtures_df_name_cur_gw.columns=[&#39;home_team&#39;,&#39;away_team&#39;,&#39;home_id&#39;,&#39;away_id&#39;] . spi_data_name_fil=spi_data_name[[&#39;team1&#39;,&#39;team2&#39;,&#39;team1_id&#39;,&#39;team2_id&#39;,&#39;proj_score1&#39;,&#39;proj_score2&#39;]] spi_data_name_fil.columns=[&#39;team1&#39;,&#39;team2&#39;,&#39;home_id&#39;,&#39;away_id&#39;,&#39;proj_score1&#39;,&#39;proj_score2&#39;] spi_gw_scores=pd.merge(left=fixtures_df_name_cur_gw,right=spi_data_name_fil,left_on=[&#39;home_id&#39;,&#39;away_id&#39;],right_on=[&#39;home_id&#39;,&#39;away_id&#39;],how=&#39;inner&#39;) . players_df_filtered_teams=pd.merge(left=players_df_filtered,right=teams_df_filtered_join,how=&#39;inner&#39;,left_on=&#39;team&#39;,right_on=&#39;id&#39;) #players_df_filtered_teams . team_list=[&#39;understat_Arsenal.csv&#39;,&#39;understat_Aston_Villa.csv&#39;,&#39;understat_Brighton.csv&#39;,&#39;understat_Burnley.csv&#39;,&#39;understat_Chelsea.csv&#39;,&#39;understat_Crystal_Palace.csv&#39;,&#39;understat_Everton.csv&#39;,&#39;understat_Fulham.csv&#39;,&#39;understat_Leeds.csv&#39;,&#39;understat_Leicester.csv&#39;,&#39;understat_Liverpool.csv&#39;,&#39;understat_Manchester_City.csv&#39;,&#39;understat_Manchester_United.csv&#39;,&#39;understat_Newcastle_United.csv&#39;,&#39;understat_Sheffield_United.csv&#39;,&#39;understat_Southampton.csv&#39;,&#39;understat_Tottenham.csv&#39;,&#39;understat_West_Bromwich_Albion.csv&#39;,&#39;understat_West_Ham.csv&#39;,&#39;understat_Wolverhampton_Wanderers.csv&#39;] static=&#39;https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2020-21/understat/&#39; df_l=[] for i in range(20): k=static+team_list[i] temp=pd.read_csv(k) # print(temp.shape[0]) temp[&#39;team&#39;]=team_list[i] df_l.append(temp) team_total_data = pd.concat(df_l, axis=0, ignore_index=True) #team_total_data #team_mapping_spi team_total_data_id=pd.merge(left=team_total_data,right=team_mapping_spi,left_on=&#39;team&#39;,right_on=&#39;team_file_name&#39;,how=&#39;left&#39;) team_total_data_id team_total_data_id=team_total_data_id[[&#39;team_y&#39;,&#39;id&#39;,&#39;pts&#39;,&#39;date&#39;,&#39;h_a&#39;,&#39;xG&#39;,&#39;xGA&#39;,&#39;deep&#39;,&#39;deep_allowed&#39;,&#39;scored&#39;,&#39;missed&#39;]] # #team_total_data_id team_total_data_id[&#39;date_new&#39;]=pd.to_datetime(team_total_data_id[&#39;date&#39;], errors=&#39;coerce&#39;).dt.date del team_total_data_id[&#39;date&#39;] team_total_data_id[&#39;cum_pts&#39;]=team_total_data_id.groupby([&#39;team_y&#39;])[&#39;pts&#39;].cumsum() #team_total_data_id team_total_data_id_means = team_total_data_id.join(team_total_data_id.groupby([&#39;id&#39;]).expanding().agg({&#39;xG&#39;:&#39;mean&#39;,&#39;xGA&#39;: &#39;mean&#39;, &#39;deep&#39;: &#39;mean&#39;, &#39;deep_allowed&#39;: &#39;mean&#39;,&#39;scored&#39;:&#39;mean&#39;,&#39;missed&#39;:&#39;mean&#39;}) .reset_index(level=0, drop=True) .add_suffix(&#39;_roll&#39;)) team_total_data_id_means=team_total_data_id_means.groupby([&#39;id&#39;, &#39;date_new&#39;]).last().reset_index() team_total_data_id_means=team_total_data_id_means[[&#39;id&#39;,&#39;date_new&#39;,&#39;xG_roll&#39;,&#39;xGA_roll&#39;,&#39;deep_roll&#39;,&#39;deep_allowed_roll&#39;,&#39;scored_roll&#39;,&#39;missed_roll&#39;]] team_total_data_id_means #Create a league standings table team_total_data_id=pd.merge(left=team_total_data_id,right=fixtures_df_map,left_on=&#39;date_new&#39;,right_on=&#39;date&#39;,how=&#39;inner&#39;) team_total_data_id.sort_values(by=&#39;cum_pts&#39;,inplace=True,ascending=False) team_total_data_id=team_total_data_id[[&#39;cum_pts&#39;,&#39;gw&#39;,&#39;id&#39;,&#39;date_new&#39;]] team_total_data_id[&quot;rank&quot;] = team_total_data_id.groupby(&quot;gw&quot;)[&quot;cum_pts&quot;].rank(&quot;dense&quot;, ascending=False) team_total_data_id.columns=[&#39;cum_pts&#39;,&#39;gw&#39;,&#39;id&#39;,&#39;date_new&#39;,&#39;rank&#39;] #team_total_data_id team_total_data_id=pd.merge(left=team_total_data_id,right=team_total_data_id_means,left_on=[&#39;id&#39;,&#39;date_new&#39;],right_on=[&#39;id&#39;,&#39;date_new&#39;],how=&#39;inner&#39;) del team_total_data_id[&#39;date_new&#39;] team_total_data_id[&#39;xG_diff&#39;]=team_total_data_id[&#39;xG_roll&#39;]-team_total_data_id[&#39;xGA_roll&#39;] team_total_data_id[&#39;deep_diff&#39;]=team_total_data_id[&#39;deep_roll&#39;]/(team_total_data_id[&#39;deep_roll&#39;]+team_total_data_id[&#39;deep_allowed_roll&#39;]) team_total_data_id[&#39;scored_diff&#39;]=team_total_data_id[&#39;scored_roll&#39;]/(team_total_data_id[&#39;scored_roll&#39;]+team_total_data_id[&#39;missed_roll&#39;]) team_total_data_id=team_total_data_id[[&#39;cum_pts&#39;,&#39;gw&#39;,&#39;id&#39;,&#39;rank&#39;,&#39;xG_diff&#39;,&#39;deep_diff&#39;,&#39;scored_diff&#39;]] team_total_data_id #team_total_data_id.to_csv(&#39;team_total_data_id.csv&#39;) #files.download(&#39;team_total_data_id.csv&#39;) . cum_pts gw id rank xG_diff deep_diff scored_diff . 0 44 | 21 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | . 1 41 | 21 | 13 | 2.0 | 0.455679 | 0.614094 | 0.578125 | . 2 41 | 20 | 12 | 1.0 | 1.289870 | 0.761733 | 0.734694 | . 3 40 | 20 | 13 | 2.0 | 0.440155 | 0.607639 | 0.578125 | . 4 40 | 21 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | . ... ... | ... | ... | ... | ... | ... | ... | . 405 0 | 2 | 4 | 3.0 | 0.536675 | 0.300000 | 0.333333 | . 406 0 | 4 | 4 | 8.0 | -0.446754 | 0.510204 | 0.272727 | . 407 0 | 2 | 16 | 3.0 | -0.067990 | 0.818182 | 0.250000 | . 408 0 | 1 | 18 | 2.0 | -2.602813 | 0.666667 | 0.000000 | . 409 0 | 3 | 15 | 6.0 | -0.184315 | 0.511111 | 0.000000 | . 410 rows × 7 columns . #gw_list=[&#39;gw1&#39;,&#39;gw2&#39;,&#39;gw3&#39;,&#39;gw4&#39;,&#39;gw5&#39;,&#39;gw6&#39;,&#39;gw7&#39;,&#39;gw8&#39;,&#39;gw9&#39;,&#39;gw10&#39;,&#39;gw11&#39;,&#39;gw12&#39;,&#39;gw13&#39;,&#39;gw14&#39;,&#39;gw15&#39;] gw_list=[] for i in range(GW-1): gw_str=&#39;gw&#39;+str(i+1) gw_list.append(gw_str) print(gw_list) static=&#39;https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2020-21/gws/&#39; df_l=[] for i in range(len(gw_list)): k=static+gw_list[i]+&#39;.csv&#39; temp=pd.read_csv(k) temp[&#39;gw&#39;]=i+1 df_l.append(temp) # print(k) weekly_data = pd.concat(df_l, axis=0, ignore_index=True) #weekly_data weekly_data_team=pd.merge(left=weekly_data,right=teams_df_filtered_join,left_on=&#39;opponent_team&#39;,right_on=&#39;id&#39;,how=&#39;inner&#39;) weekly_data_team=weekly_data_team.rename(columns={&quot;name_y&quot;: &quot;opponent_team_name&quot;}) weekly_data_team=pd.merge(left=weekly_data_team,right=teams_df_filtered_join,left_on=&#39;team&#39;,right_on=&#39;name&#39;,how=&#39;inner&#39;) weekly_data_team=weekly_data_team.rename(columns={&quot;name_x&quot;: &quot;player_name&quot;,&#39;id_y&#39;:&#39;team_id&#39;}) #weekly_data_team . [&#39;gw1&#39;, &#39;gw2&#39;, &#39;gw3&#39;, &#39;gw4&#39;, &#39;gw5&#39;, &#39;gw6&#39;, &#39;gw7&#39;, &#39;gw8&#39;, &#39;gw9&#39;, &#39;gw10&#39;, &#39;gw11&#39;, &#39;gw12&#39;, &#39;gw13&#39;, &#39;gw14&#39;, &#39;gw15&#39;, &#39;gw16&#39;, &#39;gw17&#39;, &#39;gw18&#39;, &#39;gw19&#39;, &#39;gw20&#39;, &#39;gw21&#39;] . weekly_data_team.gw.max() . 21 . #Add the home and away team columns weekly_data_team[&#39;home_team&#39;] = weekly_data_team[&#39;team_id&#39;] weekly_data_team[&#39;away_team&#39;] = weekly_data_team[&#39;team_id&#39;] weekly_data_team.loc[weekly_data_team[&#39;was_home&#39;] == True, &#39;home_team&#39;] = weekly_data_team.loc[weekly_data_team[&#39;was_home&#39;] == True, &#39;team_id&#39;] weekly_data_team.loc[weekly_data_team[&#39;was_home&#39;] == True, &#39;away_team&#39;] = weekly_data_team.loc[weekly_data_team[&#39;was_home&#39;] == True, &#39;opponent_team&#39;] weekly_data_team.loc[weekly_data_team[&#39;was_home&#39;] == False, &#39;home_team&#39;] = weekly_data_team.loc[weekly_data_team[&#39;was_home&#39;] == False, &#39;opponent_team&#39;] weekly_data_team.loc[weekly_data_team[&#39;was_home&#39;] == False, &#39;away_team&#39;] = weekly_data_team.loc[weekly_data_team[&#39;was_home&#39;] == False, &#39;team_id&#39;] #weekly_data_team weekly_data_team_spi=pd.merge(left=weekly_data_team,right=spi_data_name_fil,left_on=[&#39;home_team&#39;,&#39;away_team&#39;],right_on=[&#39;home_id&#39;,&#39;away_id&#39;],how=&#39;inner&#39;) weekly_data_team_spi #Weekly data remove players who haven&#39;t started yet zero_min=weekly_data_team_spi.groupby([&#39;player_name&#39;,]).agg({&#39;minutes&#39;:&#39;sum&#39;}).reset_index() zero_min=zero_min.loc[zero_min[&#39;minutes&#39;]==0] #zero_min #weekly_data_team_spi.player_name.isin(zero_min[&#39;player_name&#39;]).sum() weekly_data_team_spi_zero=weekly_data_team_spi[~(weekly_data_team_spi.player_name.isin(zero_min[&#39;player_name&#39;]))] # weekly_data_team_spi_zero[&#39;team_id&#39;]=0 # weekly_data_team_spi_zero.loc[:,&#39;team_id&#39;]=weekly_data_team_spi_zero.loc[weekly_data_team_spi_zero[&#39;was_home&#39;]=True,&#39;home_team&#39;] #weekly_data_team_spi_zero . gp=weekly_data.groupby([&#39;name&#39;,&#39;gw&#39;]).agg({&#39;total_points&#39;:&#39;sum&#39;}).reset_index() gp.sort_values(by=&#39;total_points&#39;,ascending=False) . name gw total_points . 5866 John Stones | 19 | 27 | . 4677 Jack Grealish | 4 | 24 | . 4391 Heung-Min Son | 2 | 24 | . 7880 Matheus Pereira | 19 | 24 | . 9798 Riyad Mahrez | 10 | 21 | . ... ... | ... | ... | . 127 Aboubakar Kamara | 6 | -2 | . 3399 Erik Pieters | 2 | -2 | . 7311 Luke Shaw | 4 | -2 | . 662 Andreas Christensen | 2 | -3 | . 6778 Kieran Gibbs | 2 | -4 | . 11984 rows × 3 columns . gp=weekly_data_team_spi_zero.groupby([&#39;total_points&#39;]).size().reset_index(name=&#39;counts&#39;) #gp.sort_values(by=&#39;counts&#39;,ascending=False) fig=px.bar(gp,x=&#39;total_points&#39;,y=&#39;counts&#39;,title=&#39;Distribution of points scored in gameweek by players&#39;) fig.show() . . . weekly_data_team_spi_zero[&#39;point_flag&#39;]=0 weekly_data_team_spi_zero.loc[weekly_data_team_spi_zero[&#39;total_points&#39;]&gt;2,&#39;point_flag&#39;]=1 #weekly_data_team_spi_zero gp=weekly_data_team_spi_zero.groupby([&#39;position&#39;,&#39;point_flag&#39;]).size().reset_index(name=&#39;counts&#39;) gp fig = make_subplots(rows=1, cols=4,specs=[[{&#39;type&#39;:&#39;domain&#39;}, {&#39;type&#39;:&#39;domain&#39;},{&#39;type&#39;:&#39;domain&#39;},{&#39;type&#39;:&#39;domain&#39;}]],subplot_titles=(&quot;GK&quot;,&quot;DEF&quot;,&quot;MID&quot;,&quot;FWD&quot;)) fig.add_trace(go.Pie(labels=gp.loc[gp[&#39;position&#39;]==&#39;GK&#39;,&#39;point_flag&#39;], values=gp.loc[gp[&#39;position&#39;]==&#39;GK&#39;,&#39;counts&#39;], name=&quot;GK&quot;),1, 1) fig.add_trace(go.Pie(labels=gp.loc[gp[&#39;position&#39;]==&#39;DEF&#39;,&#39;point_flag&#39;], values=gp.loc[gp[&#39;position&#39;]==&#39;DEF&#39;,&#39;counts&#39;], name=&quot;DEF&quot;),1, 2) fig.add_trace(go.Pie(labels=gp.loc[gp[&#39;position&#39;]==&#39;MID&#39;,&#39;point_flag&#39;], values=gp.loc[gp[&#39;position&#39;]==&#39;MID&#39;,&#39;counts&#39;], name=&quot;MID&quot;),1, 3) fig.add_trace(go.Pie(labels=gp.loc[gp[&#39;position&#39;]==&#39;FWD&#39;,&#39;point_flag&#39;], values=gp.loc[gp[&#39;position&#39;]==&#39;FWD&#39;,&#39;counts&#39;], name=&quot;FW&quot;),1, 4) fig.update_traces(hole=.4, hoverinfo=&quot;label+percent+name&quot;) fig.update_layout( title_text=&quot;Points Distribution by Position&quot;) fig.show() . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy /usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy . . . . player_summary=weekly_data_team_spi_zero[[&#39;player_name&#39;,&#39;round&#39;,&#39;team_id&#39;,&#39;total_points&#39;]] team_gp=player_summary.groupby([&#39;team_id&#39;,&#39;round&#39;]).agg({&#39;total_points&#39;:&#39;sum&#39;}).reset_index() team_gp.columns=[&#39;team_id&#39;,&#39;round&#39;,&#39;team_total_points&#39;] team_gp team_gp[&#39;team_total_points_cumsum&#39;] = team_gp.groupby([&#39;team_id&#39;])[&#39;team_total_points&#39;].cumsum() team_gp del team_gp[&#39;team_total_points&#39;] # team_player_gp=player_summary.groupby([&#39;team_id&#39;,&#39;player_name&#39;,&#39;round&#39;]).agg({&#39;total_points&#39;:&#39;sum&#39;}).reset_index() # team_player_gp.columns=[&#39;team_id&#39;,&#39;player_name&#39;,&#39;round&#39;,&#39;team_total_points&#39;] # team_player_gp # from google.colab import files # team_player_gp.to_csv(&#39;team_player_gp.csv&#39;) # files.download(&#39;team_player_gp.csv&#39;) . weekly_data_subset=weekly_data_team_spi_zero[[&#39;player_name&#39;,&#39;gw&#39;,&#39;position&#39;,&#39;team&#39;,&#39;round&#39;,&#39;id_x&#39;,&#39;team_id&#39;,&#39;xP&#39;,&#39;assists&#39;,&#39;bonus&#39;,&#39;clean_sheets&#39;,&#39;goals_scored&#39;,&#39;goals_conceded&#39;,&#39;minutes&#39;,&#39;creativity&#39;,&#39;ict_index&#39;,&#39;influence&#39;,&#39;selected&#39;,&#39;threat&#39;,&#39;yellow_cards&#39;,&#39;red_cards&#39;,&#39;was_home&#39;,&#39;home_team&#39;,&#39;away_team&#39;,&#39;proj_score1&#39;,&#39;proj_score2&#39;,&#39;total_points&#39;,&#39;point_flag&#39;]] weekly_data_subset=weekly_data_subset.rename(columns={&quot;id_x&quot;: &quot;opponent_id&quot;}) #Weekly Cumulative sums for last four weeks weekly_data_subset.sort_values(by=[&#39;player_name&#39;,&#39;gw&#39;],ascending=True,inplace=True) gp_cols=weekly_data_subset[[&#39;player_name&#39;,&#39;gw&#39;,&#39;red_cards&#39;,&#39;yellow_cards&#39;,&#39;xP&#39;,&#39;total_points&#39;,&#39;bonus&#39;,&#39;clean_sheets&#39;,&#39;assists&#39;,&#39;minutes&#39;,&#39;influence&#39;,&#39;creativity&#39;,&#39;threat&#39;,&#39;ict_index&#39;]] #gp_cols=gp_cols.loc[gp_cols.gw&gt;=GW-4] gp_cumsum=gp_cols.groupby([&#39;player_name&#39;,&#39;gw&#39;]).sum().groupby(&#39;player_name&#39;).cumsum().reset_index() #Season rolling numbers #Weekly Mean Sums weekly_rolling_means = weekly_data_subset.join(weekly_data_subset.groupby([&#39;player_name&#39;]).expanding().agg({&#39;minutes&#39;:&#39;mean&#39;,&#39;influence&#39;: &#39;mean&#39;, &#39;creativity&#39;: &#39;mean&#39;, &#39;threat&#39;: &#39;mean&#39;,&#39;ict_index&#39;:&#39;mean&#39;,&#39;selected&#39;:&#39;mean&#39;,&#39;total_points&#39;:&#39;mean&#39;}) .reset_index(level=0, drop=True) .add_suffix(&#39;_roll&#39;)) weekly_rolling_means=weekly_rolling_means.groupby([&#39;round&#39;, &#39;player_name&#39;]).last().reset_index() weekly_rolling_means=weekly_rolling_means[[&#39;player_name&#39;,&#39;gw&#39;,&#39;influence_roll&#39;, &#39;creativity_roll&#39;, &#39;threat_roll&#39;,&#39;ict_index_roll&#39;,&#39;minutes_roll&#39;,&#39;selected_roll&#39;,&#39;total_points_roll&#39;]] weekly_data_subset_new=weekly_data_subset[[&#39;player_name&#39;,&#39;gw&#39;,&#39;position&#39;,&#39;team&#39;,&#39;round&#39;,&#39;team_id&#39;,&#39;opponent_id&#39;,&#39;was_home&#39;,&#39;home_team&#39;,&#39;away_team&#39;,&#39;proj_score1&#39;,&#39;proj_score2&#39;,&#39;point_flag&#39;]].copy() weekly_data_subset_new[&#39;join_key&#39;]=0 gw=weekly_data_subset_new[&#39;gw&#39;] weekly_data_subset_new.loc[:,&#39;join_key&#39;]=gw-1 #Merge cumulative sums weekly_data_subset_new_agg=pd.merge(left=weekly_data_subset_new,right=weekly_rolling_means,left_on=[&#39;player_name&#39;,&#39;join_key&#39;],right_on=[&#39;player_name&#39;,&#39;gw&#39;],how=&#39;inner&#39;) #Merge cumulative means weekly_data_subset_new_agg=pd.merge(left=weekly_data_subset_new_agg,right=gp_cumsum,left_on=[&#39;player_name&#39;,&#39;join_key&#39;],right_on=[&#39;player_name&#39;,&#39;gw&#39;],how=&#39;inner&#39;) #Merge team total ranking stats with home team weekly_data_subset_new_agg_home=pd.merge(left=weekly_data_subset_new_agg,right=team_total_data_id,left_on=[&#39;team_id&#39;,&#39;join_key&#39;],right_on=[&#39;id&#39;,&#39;gw&#39;]) weekly_data_subset_new_agg_home=weekly_data_subset_new_agg_home.rename(columns={&quot;rank&quot;: &quot;team_rank&quot;,&#39;cum_pts&#39;:&#39;team_pts&#39;,&#39;xG_diff&#39;:&#39;xG_diff_team&#39;,&#39;scored_diff&#39;:&#39;scored_diff_team&#39;,&#39;deep_diff&#39;:&#39;deep_diff_team&#39;}) #Merge team total ranking stats with away team weekly_data_subset_new_agg_pts=pd.merge(left=weekly_data_subset_new_agg_home,right=team_total_data_id,left_on=[&#39;opponent_id&#39;,&#39;join_key&#39;],right_on=[&#39;id&#39;,&#39;gw&#39;]) weekly_data_subset_new_agg_pts=weekly_data_subset_new_agg_pts.rename(columns={&quot;rank&quot;: &quot;opponent_rank&quot;,&#39;cum_pts&#39;:&#39;opponent_points&#39;,&#39;xG_diff&#39;:&#39;xG_diff_opponent&#39;,&#39;scored_diff&#39;:&#39;scored_diff_opponent&#39;,&#39;deep_diff&#39;:&#39;deep_diff_opponent&#39;}) #Calculate rank and projected score differences for the upcoming fixture weekly_data_subset_new_agg_pts[&#39;rank_diff&#39;]=weekly_data_subset_new_agg_pts[&#39;team_rank&#39;]-weekly_data_subset_new_agg_pts[&#39;opponent_rank&#39;] weekly_data_subset_new_agg_pts[&#39;proj_score_diff&#39;]=weekly_data_subset_new_agg_pts[&#39;proj_score1&#39;]-weekly_data_subset_new_agg_pts[&#39;proj_score2&#39;] #Merge team total ranking stats with away team weekly_data_subset_new_agg_pts_team=pd.merge(left=weekly_data_subset_new_agg_pts,right=team_gp,left_on=[&#39;team_id&#39;,&#39;join_key&#39;],right_on=[&#39;team_id&#39;,&#39;round&#39;],how=&#39;inner&#39;) weekly_data_subset_new_agg_pts_team[&#39;percent_team_points&#39;]=weekly_data_subset_new_agg_pts_team[&#39;total_points&#39;]/weekly_data_subset_new_agg_pts_team[&#39;team_total_points_cumsum&#39;] # ##del weekly_data_subset_new_agg_pts[&#39;gw&#39;] del weekly_data_subset_new_agg_pts_team[&#39;gw_y&#39;] del weekly_data_subset_new_agg_pts_team[&#39;gw_x&#39;] del weekly_data_subset_new_agg_pts_team[&#39;id_x&#39;] del weekly_data_subset_new_agg_pts_team[&#39;id_y&#39;] del weekly_data_subset_new_agg_pts_team[&#39;join_key&#39;] del weekly_data_subset_new_agg_pts_team[&#39;team_id&#39;] del weekly_data_subset_new_agg_pts_team[&#39;opponent_id&#39;] weekly_data_subset_new_agg_pts_team #weekly_data_subset_new_agg_pts_team.to_csv(&#39;weekly_data_subset_new_agg_pts_team.csv&#39;) #files.download(&#39;weekly_data_subset_new_agg_pts_team.csv&#39;) . player_name position team round_x was_home home_team away_team proj_score1 proj_score2 point_flag influence_roll creativity_roll threat_roll ict_index_roll minutes_roll selected_roll total_points_roll red_cards yellow_cards xP total_points bonus clean_sheets assists minutes influence creativity threat ict_index team_pts team_rank xG_diff_team deep_diff_team scored_diff_team opponent_points gw opponent_rank xG_diff_opponent deep_diff_opponent scored_diff_opponent rank_diff proj_score_diff round_y team_total_points_cumsum percent_team_points . 0 Aaron Connolly | FWD | Brighton | 2 | False | 14 | 3 | 1.28 | 1.13 | 1 | 1.2 | 0.30 | 32.0 | 3.40 | 45.0 | 32205.0 | 1.0 | 0 | 0 | 0.5 | 1 | 0 | 0 | 0 | 45 | 1.2 | 0.3 | 32.0 | 3.4 | 0 | 2.0 | 0.172190 | 0.333333 | 0.25 | 3 | 1 | 1.0 | 0.797665 | 0.666667 | 1.0 | 1.0 | 0.15 | 1 | 27 | 0.037037 | . 1 Adam Lallana | MID | Brighton | 2 | False | 14 | 3 | 1.28 | 1.13 | 0 | 6.8 | 27.20 | 2.0 | 3.60 | 44.0 | 78657.0 | 1.0 | 0 | 0 | 1.2 | 1 | 0 | 0 | 0 | 44 | 6.8 | 27.2 | 2.0 | 3.6 | 0 | 2.0 | 0.172190 | 0.333333 | 0.25 | 3 | 1 | 1.0 | 0.797665 | 0.666667 | 1.0 | 1.0 | 0.15 | 1 | 27 | 0.037037 | . 2 Adam Webster | DEF | Brighton | 2 | False | 14 | 3 | 1.28 | 1.13 | 1 | 14.8 | 11.80 | 1.0 | 2.80 | 90.0 | 187445.0 | 1.0 | 0 | 0 | 0.6 | 1 | 0 | 0 | 0 | 90 | 14.8 | 11.8 | 1.0 | 2.8 | 0 | 2.0 | 0.172190 | 0.333333 | 0.25 | 3 | 1 | 1.0 | 0.797665 | 0.666667 | 1.0 | 1.0 | 0.15 | 1 | 27 | 0.037037 | . 3 Alexis Mac Allister | MID | Brighton | 2 | False | 14 | 3 | 1.28 | 1.13 | 0 | 0.0 | 0.00 | 0.0 | 0.00 | 0.0 | 3939.0 | 0.0 | 0 | 0 | 0.8 | 0 | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 2.0 | 0.172190 | 0.333333 | 0.25 | 3 | 1 | 1.0 | 0.797665 | 0.666667 | 1.0 | 1.0 | 0.15 | 1 | 27 | 0.000000 | . 4 Alireza Jahanbakhsh | MID | Brighton | 2 | False | 14 | 3 | 1.28 | 1.13 | 0 | 4.4 | 0.70 | 0.0 | 0.50 | 11.0 | 3104.0 | 1.0 | 0 | 0 | 0.8 | 1 | 0 | 0 | 0 | 11 | 4.4 | 0.7 | 0.0 | 0.5 | 0 | 2.0 | 0.172190 | 0.333333 | 0.25 | 3 | 1 | 1.0 | 0.797665 | 0.666667 | 1.0 | 1.0 | 0.15 | 1 | 27 | 0.037037 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 8545 Patrick Bamford | FWD | Leeds | 3 | False | 15 | 10 | 1.40 | 1.05 | 1 | 45.2 | 6.20 | 24.0 | 7.55 | 65.0 | 489813.0 | 10.5 | 0 | 0 | 10.6 | 21 | 3 | 0 | 2 | 130 | 90.4 | 12.4 | 48.0 | 15.1 | 3 | 2.0 | -1.493399 | 0.233333 | 0.50 | 0 | 2 | 3.0 | -0.309657 | 0.375000 | 0.0 | -1.0 | 0.35 | 2 | 92 | 0.228261 | . 8546 Robin Koch | DEF | Leeds | 3 | False | 15 | 10 | 1.40 | 1.05 | 1 | 17.9 | 0.25 | 19.5 | 3.80 | 90.0 | 36835.0 | 0.5 | 0 | 0 | 0.6 | 1 | 0 | 0 | 0 | 180 | 35.8 | 0.5 | 39.0 | 7.6 | 3 | 2.0 | -1.493399 | 0.233333 | 0.50 | 0 | 2 | 3.0 | -0.309657 | 0.375000 | 0.0 | -1.0 | 0.35 | 2 | 92 | 0.010870 | . 8547 Rodrigo Moreno | FWD | Leeds | 3 | False | 15 | 10 | 1.40 | 1.05 | 0 | 0.0 | 0.50 | 2.0 | 0.25 | 36.5 | 467745.0 | 1.0 | 0 | 0 | 1.3 | 2 | 0 | 0 | 0 | 73 | 0.0 | 1.0 | 4.0 | 0.5 | 3 | 2.0 | -1.493399 | 0.233333 | 0.50 | 0 | 2 | 3.0 | -0.309657 | 0.375000 | 0.0 | -1.0 | 0.35 | 2 | 92 | 0.021739 | . 8548 Stuart Dallas | DEF | Leeds | 3 | False | 15 | 10 | 1.40 | 1.05 | 1 | 22.2 | 2.50 | 3.0 | 2.80 | 90.0 | 307651.0 | 2.0 | 0 | 0 | 2.1 | 4 | 0 | 0 | 1 | 180 | 44.4 | 5.0 | 6.0 | 5.6 | 3 | 2.0 | -1.493399 | 0.233333 | 0.50 | 0 | 2 | 3.0 | -0.309657 | 0.375000 | 0.0 | -1.0 | 0.35 | 2 | 92 | 0.043478 | . 8549 Tyler Roberts | MID | Leeds | 3 | False | 15 | 10 | 1.40 | 1.05 | 0 | 6.3 | 7.60 | 5.5 | 1.95 | 36.5 | 5330.5 | 1.0 | 0 | 0 | 0.9 | 2 | 0 | 0 | 0 | 73 | 12.6 | 15.2 | 11.0 | 3.9 | 3 | 2.0 | -1.493399 | 0.233333 | 0.50 | 0 | 2 | 3.0 | -0.309657 | 0.375000 | 0.0 | -1.0 | 0.35 | 2 | 92 | 0.021739 | . 8550 rows × 45 columns . # #weekly_data_subset # weekly_rolling_means = weekly_data_subset.join(weekly_data_subset.groupby([&#39;player_name&#39;]).expanding().agg({&#39;minutes&#39;:&#39;mean&#39;,&#39;influence&#39;: &#39;mean&#39;, &#39;creativity&#39;: &#39;mean&#39;, &#39;threat&#39;: &#39;mean&#39;,&#39;ict_index&#39;:&#39;mean&#39;}) # .reset_index(level=0, drop=True) # .add_suffix(&#39;_roll&#39;)) # weekly_rolling_means=weekly_rolling_means.groupby([&#39;round&#39;, &#39;player_name&#39;]).last().reset_index() # weekly_rolling_means=weekly_rolling_means[[&#39;player_name&#39;,&#39;gw&#39;,&#39;influence_roll&#39;, &#39;creativity_roll&#39;, &#39;threat_roll&#39;,&#39;ict_index_roll&#39;,&#39;minutes_roll&#39;]] # weekly_rolling_means # # k.to_csv(&#39;k.csv&#39;) # # files.download(&#39;k.csv&#39;) gp_cumsum . player_name gw red_cards yellow_cards xP total_points bonus clean_sheets assists minutes influence creativity threat ict_index . 0 Aaron Connolly | 1 | 0 | 0 | 0.5 | 1 | 0 | 0 | 0 | 45 | 1.2 | 0.3 | 32.0 | 3.4 | . 1 Aaron Connolly | 2 | 0 | 0 | 4.5 | 9 | 2 | 1 | 0 | 134 | 36.0 | 11.6 | 55.0 | 10.3 | . 2 Aaron Connolly | 3 | 0 | 0 | 7.2 | 11 | 2 | 1 | 0 | 207 | 36.0 | 23.7 | 63.0 | 12.2 | . 3 Aaron Connolly | 4 | 0 | 0 | 9.9 | 13 | 2 | 1 | 0 | 272 | 39.0 | 24.0 | 67.0 | 12.9 | . 4 Aaron Connolly | 5 | 0 | 0 | 12.9 | 17 | 2 | 1 | 1 | 284 | 56.2 | 34.3 | 69.0 | 15.9 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 9178 Çaglar Söyüncü | 16 | 0 | 1 | 12.4 | 8 | 0 | 1 | 0 | 360 | 83.4 | 24.6 | 44.0 | 15.2 | . 9179 Çaglar Söyüncü | 17 | 0 | 1 | 13.1 | 9 | 0 | 1 | 0 | 371 | 83.4 | 24.6 | 46.0 | 15.4 | . 9180 Çaglar Söyüncü | 19 | 0 | 1 | 15.7 | 10 | 0 | 1 | 0 | 408 | 91.6 | 24.7 | 46.0 | 16.2 | . 9181 Çaglar Söyüncü | 20 | 0 | 1 | 17.0 | 11 | 0 | 1 | 0 | 421 | 98.4 | 25.1 | 46.0 | 16.9 | . 9182 Çaglar Söyüncü | 21 | 0 | 1 | 18.1 | 11 | 0 | 1 | 0 | 466 | 104.0 | 35.6 | 50.0 | 18.9 | . 9183 rows × 14 columns . labelencoder = LabelEncoder() weekly_data_subset_new_agg_pts_team[&#39;position_flag&#39;] = labelencoder.fit_transform(weekly_data_subset_new_agg_pts_team[&#39;position&#39;]) cols = pd.get_dummies(weekly_data_subset_new_agg_pts_team[&#39;position_flag&#39;]) cols.columns = [&#39;pos_0&#39;,&#39;pos_1&#39;,&#39;pos_2&#39;,&#39;pos_3&#39;] weekly_data_subset_new_agg_pts_team1 = pd.concat([weekly_data_subset_new_agg_pts_team, cols], axis=1) #weekly_data_subset_new_agg_pts_team1 . weekly_data_subset_new_agg_pts_team2=weekly_data_subset_new_agg_pts_team1.copy() X=weekly_data_subset_new_agg_pts_team1.copy() #Y=weekly_data_subset_new_agg[&#39;point_flag&#39;] del X[&#39;player_name&#39;] del X[&#39;position&#39;] del X[&#39;team&#39;] #del X[&#39;total_points&#39;] #X_train,X_test,Y_train,Y_test=train_test_split(X, Y,test_size=0.3,random_state=1) max_gw=X[&#39;round_x&#39;].max() print(max_gw) #max_gw=14 X_train=X.loc[X[&#39;round_x&#39;]&lt;max_gw] X_test=X.loc[X[&#39;round_x&#39;]==max_gw] Y_train=X_train[&#39;point_flag&#39;] Y_test=X_test[&#39;point_flag&#39;] del X_train[&#39;point_flag&#39;] del X_test[&#39;point_flag&#39;] del X_train[&#39;round_x&#39;] del X_test[&#39;round_x&#39;] del X_train[&#39;round_y&#39;] del X_test[&#39;round_y&#39;] . 21 . . from sklearn.model_selection import cross_val_score from sklearn.model_selection import RepeatedStratifiedKFold model_rf = RandomForestClassifier(n_estimators=100,max_depth=7, random_state=0,min_samples_split=5) #class_weight=&#39;balanced_subsample&#39; model_rf.fit(X_train,Y_train)#Fitting the model #Generating predictions from Random Fores Models pred_rf=model_rf.predict(X_test) pred_rf_proba=model_rf.predict_proba(X_test) feat_importances = pd.Series(model_rf.feature_importances_, index=X_train.columns) feat_importances=feat_importances.sort_values() feat_importances.plot(kind=&#39;barh&#39;,figsize=(16,16))#Plotting feature importance print(&#39;Model Accuracy&#39;) print(model_rf.score(X_test,Y_test)) . Model Accuracy 0.7873684210526316 . import statistics cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1) # evaluate model scores = cross_val_score(model_rf, X_train, Y_train, scoring=&#39;roc_auc&#39;, cv=cv, n_jobs=-1) # summarize performance print(&#39;Mean ROC AUC: %.3f&#39; % statistics.mean(scores)) . Mean ROC AUC: 0.791 . import plotly.express as px import matplotlib.pyplot as plt def plot_hist(pred): plt.hist(pred[:,1], density=True, bins=30) # density=False would make counts plt.ylabel(&#39;Probability&#39;) plt.xlabel(&#39;Data&#39;) plot_hist(pred_rf_proba) print(pred_rf_proba[:,1].mean()) . 0.2283340878113225 . calc_pred=pred_rf_proba[:,1]&gt;0.16 calc_pred=calc_pred.astype(int) conf_mat = confusion_matrix(Y_test, calc_pred) df_confusion = pd.crosstab(Y_test, calc_pred, rownames=[&#39;Actual&#39;], colnames=[&#39;Predicted&#39;], margins=True) print (df_confusion) #print(conf_mat) # Visualize it as a heatmap import seaborn import matplotlib.pyplot as plt seaborn.heatmap(conf_mat) plt.show() FP = conf_mat.sum(axis=0) - np.diag(conf_mat) FN = conf_mat.sum(axis=1) - np.diag(conf_mat) TP = np.diag(conf_mat) TN = conf_mat.sum() - (FP + FN + TP) TPR = TP/(TP+FN) print(&quot;True Positive Rate&quot;,TPR) . Predicted 0 1 All Actual 0 190 186 376 1 13 86 99 All 203 272 475 . True Positive Rate [0.50531915 0.86868687] . import sklearn.metrics as metrics import matplotlib.pyplot as plt def plot_curve(pred): fpr, tpr, threshold = metrics.roc_curve(Y_test, pred[:,1]) roc_auc = metrics.auc(fpr, tpr) # method I: plt plt.title(&#39;Receiver Operating Characteristic&#39;) plt.plot(fpr, tpr, &#39;b&#39;, label = &#39;AUC = %0.2f&#39; % roc_auc) plt.legend(loc = &#39;lower right&#39;) plt.plot([0, 1], [0, 1],&#39;r--&#39;) plt.xlim([0, 1]) plt.ylim([0, 1]) plt.ylabel(&#39;True Positive Rate&#39;) plt.xlabel(&#39;False Positive Rate&#39;) plt.show() plot_curve(pred_rf_proba) . # print(optimal_proba_cutoff) # roc_predictions=calc_pred=pred_rf_proba[:,1]&gt;0.26 # roc_predictions=roc_predictions.astype(int) #roc_predictions = [1 if i &gt;= optimal_proba_cutoff else 0 for i in predicted_proba[:, -1]] . # print(&quot;Precision Score Before and After Thresholding: {}, {}&quot;.format(precision_score(Y_test, roc_predictions), precision_score(Y_test, roc_predictions))) # print(&quot;Recall Score Before and After Thresholding: {}, {}&quot;.format(recall_score(Y_test, roc_predictions), recall_score(Y_test, roc_predictions))) . XGBoost . from xgboost import XGBClassifier model_xg = XGBClassifier(max_depth=7, # &#39;max_leaves&#39; : 2**4, alpha=0.1, # &#39;lambda&#39; : 0.2, eta=0.1, subsample=0.7, min_child_weight =5, learning_rate=0.1, #default = 0.3, colsample_bytree=0.7, eval_metric=&#39;auc&#39;, objective = &#39;binary:logistic&#39;, grow_policy=&#39;lossguide&#39;, n_estimators=100) model_xg.fit(X_train, Y_train) pred_xg_proba=model_xg.predict_proba(X_test) feat_importances = pd.Series(model_xg.feature_importances_, index=X_train.columns) feat_importances=feat_importances.sort_values() feat_importances.plot(kind=&#39;barh&#39;,figsize=(16,16))#Plotting feature importance . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f2669eeb4a8&gt; . plot_curve(pred_xg_proba) plot_hist(pred_xg_proba) calc_pred=pred_xg_proba[:,1]&gt;0.16 calc_pred=calc_pred.astype(int) conf_mat = confusion_matrix(Y_test, calc_pred) df_confusion = pd.crosstab(Y_test, calc_pred, rownames=[&#39;Actual&#39;], colnames=[&#39;Predicted&#39;], margins=True) print (df_confusion) . Predicted 0 1 All Actual 0 247 129 376 1 30 69 99 All 277 198 475 . X_cols=weekly_data_subset_new_agg_pts_team2[[&#39;player_name&#39;,&#39;position&#39;,&#39;team&#39;,&#39;total_points&#39;,&#39;point_flag&#39;]].copy() X_test_pred=pd.merge(X_test, X_cols, left_index=True, right_index=True) #X_test_pred[&#39;predictions&#39;]=pred_rf_proba[:,1] X_test_pred[&#39;predictions&#39;]=pred_xg_proba[:,1] . X_test_pred.loc[X_test_pred[&#39;predictions&#39;]&gt;0.5].sort_values(by=&#39;predictions&#39;,ascending=False).head(20) . was_home home_team away_team proj_score1 proj_score2 influence_roll creativity_roll threat_roll ict_index_roll minutes_roll selected_roll total_points_roll red_cards yellow_cards xP total_points_x bonus clean_sheets assists minutes influence creativity threat ict_index team_pts team_rank xG_diff_team deep_diff_team scored_diff_team opponent_points gw opponent_rank xG_diff_opponent deep_diff_opponent scored_diff_opponent rank_diff proj_score_diff team_total_points_cumsum percent_team_points position_flag pos_0 pos_1 pos_2 pos_3 player_name position team total_points_y point_flag predictions . 2520 False | 18 | 8 | 1.03 | 1.38 | 21.212500 | 22.781250 | 31.437500 | 7.543750 | 81.250000 | 6.255662e+04 | 3.625000 | 0 | 3 | 55.9 | 58 | 5 | 4 | 3 | 1300 | 339.4 | 364.5 | 503.0 | 120.7 | 13 | 14.0 | -0.590980 | 0.396396 | 0.357143 | 11 | 20 | 15.0 | -1.470378 | 0.285156 | 0.238095 | -1.0 | -0.35 | 633 | 0.091627 | 3 | 0 | 0 | 0 | 1 | Ademola Lookman | MID | Fulham | 58 | 0 | 0.920600 | . 2523 False | 18 | 8 | 1.03 | 1.38 | 17.905263 | 12.752632 | 8.789474 | 3.963158 | 81.105263 | 1.548767e+05 | 2.578947 | 0 | 4 | 37.7 | 49 | 4 | 4 | 3 | 1541 | 340.2 | 242.3 | 167.0 | 75.3 | 13 | 14.0 | -0.590980 | 0.396396 | 0.357143 | 11 | 20 | 15.0 | -1.470378 | 0.285156 | 0.238095 | -1.0 | -0.35 | 633 | 0.077409 | 3 | 0 | 0 | 0 | 1 | André-Frank Zambo Anguissa | MID | Fulham | 49 | 0 | 0.901406 | . 2542 False | 18 | 8 | 1.03 | 1.38 | 20.720000 | 1.880000 | 5.933333 | 2.873333 | 90.000000 | 1.159773e+04 | 3.266667 | 0 | 1 | 33.3 | 49 | 5 | 4 | 1 | 1350 | 310.8 | 28.2 | 89.0 | 43.1 | 13 | 14.0 | -0.590980 | 0.396396 | 0.357143 | 11 | 20 | 15.0 | -1.470378 | 0.285156 | 0.238095 | -1.0 | -0.35 | 633 | 0.077409 | 0 | 1 | 0 | 0 | 0 | Tosin Adarabioyo | DEF | Fulham | 49 | 0 | 0.839237 | . 6921 False | 5 | 4 | 1.91 | 0.58 | 14.852632 | 21.536842 | 4.000000 | 4.036842 | 90.000000 | 4.007800e+04 | 3.000000 | 0 | 4 | 47.2 | 57 | 2 | 7 | 3 | 1710 | 282.2 | 409.2 | 76.0 | 76.7 | 22 | 11.0 | -0.695852 | 0.356061 | 0.351351 | 30 | 20 | 7.0 | 0.667273 | 0.587549 | 0.589286 | 4.0 | 1.33 | 716 | 0.079609 | 3 | 0 | 0 | 0 | 1 | Ashley Westwood | MID | Burnley | 57 | 0 | 0.828182 | . 2529 False | 18 | 8 | 1.03 | 1.38 | 14.893333 | 1.233333 | 0.866667 | 1.706667 | 76.066667 | 1.557933e+03 | 2.400000 | 1 | 2 | 20.6 | 36 | 2 | 4 | 0 | 1141 | 223.4 | 18.5 | 13.0 | 25.6 | 13 | 14.0 | -0.590980 | 0.396396 | 0.357143 | 11 | 20 | 15.0 | -1.470378 | 0.285156 | 0.238095 | -1.0 | -0.35 | 633 | 0.056872 | 0 | 1 | 0 | 0 | 0 | Joachim Andersen | DEF | Fulham | 36 | 0 | 0.797265 | . 2528 False | 18 | 8 | 1.03 | 1.38 | 9.400000 | 15.521053 | 18.789474 | 4.368421 | 67.315789 | 9.510263e+03 | 2.421053 | 0 | 1 | 40.4 | 46 | 4 | 3 | 0 | 1279 | 178.6 | 294.9 | 357.0 | 83.0 | 13 | 14.0 | -0.590980 | 0.396396 | 0.357143 | 11 | 20 | 15.0 | -1.470378 | 0.285156 | 0.238095 | -1.0 | -0.35 | 633 | 0.072670 | 3 | 0 | 0 | 0 | 1 | Ivan Ricardo Neves Abreu Cavaleiro | MID | Fulham | 46 | 1 | 0.749120 | . 6518 True | 6 | 20 | 1.19 | 1.16 | 20.620000 | 12.030000 | 33.850000 | 6.655000 | 76.000000 | 1.464735e+06 | 4.950000 | 0 | 3 | 93.3 | 99 | 11 | 3 | 3 | 1520 | 412.4 | 240.6 | 677.0 | 133.1 | 23 | 10.0 | -0.572657 | 0.477912 | 0.400000 | 23 | 20 | 10.0 | -0.315068 | 0.348214 | 0.420000 | 0.0 | 0.03 | 727 | 0.136176 | 3 | 0 | 0 | 0 | 1 | Wilfried Zaha | MID | Crystal Palace | 99 | 0 | 0.744352 | . 2538 False | 18 | 8 | 1.03 | 1.38 | 17.087500 | 7.968750 | 3.250000 | 2.825000 | 89.000000 | 2.107606e+04 | 3.250000 | 0 | 1 | 39.1 | 52 | 3 | 4 | 0 | 1424 | 273.4 | 127.5 | 52.0 | 45.2 | 13 | 14.0 | -0.590980 | 0.396396 | 0.357143 | 11 | 20 | 15.0 | -1.470378 | 0.285156 | 0.238095 | -1.0 | -0.35 | 633 | 0.082148 | 0 | 1 | 0 | 0 | 0 | Ola Aina | DEF | Fulham | 52 | 0 | 0.727088 | . 3759 False | 16 | 2 | 1.25 | 1.44 | 33.200000 | 46.522222 | 45.055556 | 12.466667 | 89.833333 | 2.448694e+06 | 6.277778 | 0 | 4 | 113.2 | 113 | 12 | 9 | 10 | 1617 | 597.6 | 837.4 | 811.0 | 224.4 | 29 | 8.0 | 0.778199 | 0.536765 | 0.611111 | 29 | 20 | 8.0 | -0.319173 | 0.451327 | 0.529412 | 0.0 | -0.19 | 920 | 0.122826 | 3 | 0 | 0 | 0 | 1 | Jack Grealish | MID | Aston Villa | 113 | 1 | 0.708945 | . 3756 False | 16 | 2 | 1.25 | 1.44 | 12.066667 | 10.983333 | 5.444444 | 2.861111 | 82.833333 | 2.084678e+04 | 2.388889 | 1 | 2 | 38.6 | 43 | 0 | 8 | 2 | 1491 | 217.2 | 197.7 | 98.0 | 51.5 | 29 | 8.0 | 0.778199 | 0.536765 | 0.611111 | 29 | 20 | 8.0 | -0.319173 | 0.451327 | 0.529412 | 0.0 | -0.19 | 920 | 0.046739 | 3 | 0 | 0 | 0 | 1 | Douglas Luiz Soares de Paulo | MID | Aston Villa | 43 | 1 | 0.704342 | . 5645 False | 7 | 14 | 1.63 | 0.79 | 12.370000 | 11.700000 | 9.750000 | 3.385000 | 54.750000 | 3.779905e+04 | 2.400000 | 0 | 1 | 44.8 | 48 | 4 | 2 | 1 | 1095 | 247.4 | 234.0 | 195.0 | 67.7 | 19 | 12.0 | -0.657516 | 0.286290 | 0.358491 | 33 | 20 | 6.0 | 0.062796 | 0.452174 | 0.568627 | 6.0 | 0.84 | 662 | 0.072508 | 3 | 0 | 0 | 0 | 1 | Miguel Almirón | MID | Newcastle | 48 | 1 | 0.700847 | . 2913 False | 6 | 20 | 1.19 | 1.16 | 12.500000 | 10.130000 | 18.750000 | 4.145000 | 59.400000 | 2.698630e+05 | 3.000000 | 0 | 2 | 59.4 | 60 | 5 | 6 | 2 | 1188 | 250.0 | 202.6 | 375.0 | 82.9 | 23 | 10.0 | -0.315068 | 0.348214 | 0.420000 | 23 | 20 | 10.0 | -0.572657 | 0.477912 | 0.400000 | 0.0 | 0.03 | 763 | 0.078637 | 3 | 0 | 0 | 0 | 1 | Daniel Castelo Podence | MID | Wolves | 60 | 0 | 0.700754 | . 2522 False | 18 | 8 | 1.03 | 1.38 | 27.442105 | 0.000000 | 0.000000 | 2.731579 | 85.263158 | 1.203639e+05 | 3.578947 | 0 | 0 | 50.7 | 68 | 7 | 4 | 0 | 1620 | 521.4 | 0.0 | 0.0 | 51.9 | 13 | 14.0 | -0.590980 | 0.396396 | 0.357143 | 11 | 20 | 15.0 | -1.470378 | 0.285156 | 0.238095 | -1.0 | -0.35 | 633 | 0.107425 | 2 | 0 | 0 | 1 | 0 | Alphonse Areola | GK | Fulham | 68 | 0 | 0.680518 | . 3769 False | 16 | 2 | 1.25 | 1.44 | 23.788889 | 17.772222 | 49.333333 | 9.055556 | 90.000000 | 5.276981e+05 | 4.611111 | 0 | 1 | 81.6 | 83 | 6 | 9 | 4 | 1620 | 428.2 | 319.9 | 888.0 | 163.0 | 29 | 8.0 | 0.778199 | 0.536765 | 0.611111 | 29 | 20 | 8.0 | -0.319173 | 0.451327 | 0.529412 | 0.0 | -0.19 | 920 | 0.090217 | 1 | 0 | 1 | 0 | 0 | Ollie Watkins | FWD | Aston Villa | 83 | 0 | 0.679663 | . 6081 True | 5 | 4 | 1.91 | 0.58 | 7.810000 | 10.765000 | 7.900000 | 2.650000 | 25.050000 | 2.235575e+04 | 1.550000 | 0 | 0 | 39.5 | 31 | 1 | 2 | 1 | 501 | 156.2 | 215.3 | 158.0 | 53.0 | 30 | 7.0 | 0.667273 | 0.587549 | 0.589286 | 22 | 20 | 11.0 | -0.695852 | 0.356061 | 0.351351 | -4.0 | 1.33 | 939 | 0.033014 | 3 | 0 | 0 | 0 | 1 | Callum Hudson-Odoi | MID | Chelsea | 31 | 1 | 0.672173 | . 439 True | 3 | 17 | 1.23 | 1.48 | 11.910000 | 19.860000 | 8.150000 | 3.990000 | 44.650000 | 2.893990e+04 | 2.450000 | 0 | 1 | 51.7 | 49 | 6 | 3 | 2 | 893 | 238.2 | 397.2 | 163.0 | 79.8 | 18 | 13.0 | 0.251112 | 0.593496 | 0.431373 | 33 | 20 | 6.0 | 0.275229 | 0.354260 | 0.629630 | 7.0 | -0.25 | 737 | 0.066486 | 3 | 0 | 0 | 0 | 1 | Pascal Groß | MID | Brighton | 49 | 1 | 0.667477 | . 6498 True | 6 | 20 | 1.19 | 1.16 | 15.340000 | 20.665000 | 7.450000 | 4.355000 | 67.150000 | 1.467164e+05 | 2.900000 | 0 | 0 | 52.7 | 58 | 6 | 4 | 3 | 1343 | 306.8 | 413.3 | 149.0 | 87.1 | 23 | 10.0 | -0.572657 | 0.477912 | 0.400000 | 23 | 20 | 10.0 | -0.315068 | 0.348214 | 0.420000 | 0.0 | 0.03 | 727 | 0.079780 | 3 | 0 | 0 | 0 | 1 | Andros Townsend | MID | Crystal Palace | 58 | 0 | 0.660697 | . 6940 False | 5 | 4 | 1.91 | 0.58 | 28.789474 | 0.526316 | 0.000000 | 2.926316 | 85.263158 | 8.227975e+05 | 5.000000 | 0 | 0 | 87.2 | 95 | 17 | 7 | 0 | 1620 | 547.0 | 10.0 | 0.0 | 55.6 | 22 | 11.0 | -0.695852 | 0.356061 | 0.351351 | 30 | 20 | 7.0 | 0.667273 | 0.587549 | 0.589286 | 4.0 | 1.33 | 716 | 0.132682 | 2 | 0 | 0 | 1 | 0 | Nick Pope | GK | Burnley | 95 | 1 | 0.656792 | . 5168 True | 16 | 2 | 1.25 | 1.44 | 24.968421 | 26.857895 | 6.736842 | 5.847368 | 90.000000 | 7.082940e+05 | 4.526316 | 0 | 3 | 77.3 | 86 | 8 | 8 | 5 | 1710 | 474.4 | 510.3 | 128.0 | 111.1 | 29 | 8.0 | -0.319173 | 0.451327 | 0.529412 | 29 | 20 | 8.0 | 0.778199 | 0.536765 | 0.611111 | 0.0 | -0.19 | 871 | 0.098737 | 3 | 0 | 0 | 0 | 1 | James Ward-Prowse | MID | Southampton | 86 | 0 | 0.645985 | . 6079 True | 5 | 4 | 1.91 | 0.58 | 18.150000 | 16.200000 | 11.200000 | 4.525000 | 71.250000 | 1.622360e+06 | 4.250000 | 0 | 2 | 92.3 | 85 | 7 | 7 | 4 | 1425 | 363.0 | 324.0 | 224.0 | 90.5 | 30 | 7.0 | 0.667273 | 0.587549 | 0.589286 | 22 | 20 | 11.0 | -0.695852 | 0.356061 | 0.351351 | -4.0 | 1.33 | 939 | 0.090522 | 0 | 1 | 0 | 0 | 0 | Benjamin Chilwell | DEF | Chelsea | 85 | 0 | 0.622765 | . X_test_pred.to_csv(&#39;df.csv&#39;) #files.download(&#39;df.csv&#39;) . . fixtures_df1=fixtures_df[[&#39;event&#39;,&#39;team_h&#39;,&#39;team_a&#39;]] max_week=weekly_data_subset[&#39;round&#39;].max() print(max_week) #UNCOMMENT THIS LATER #pred_data=weekly_data_subset.loc[weekly_data_subset[&#39;round&#39;]==max_week] pred_data=weekly_data_subset fixtures_df1=fixtures_df1.loc[fixtures_df1[&#39;event&#39;]==max_week+1] #fixtures_df1=fixtures_df1.loc[fixtures_df1[&#39;event&#39;]==max_week] pred_data=pred_data[[&#39;player_name&#39;,&#39;position&#39;,&#39;team&#39;,&#39;team_id&#39;,&#39;round&#39;]].reset_index(drop=True) pred_data=pred_data.drop_duplicates(subset=[&#39;player_name&#39;,&#39;position&#39;,&#39;team&#39;,&#39;team_id&#39;]) pred_data[&#39;round&#39;]=16 print(pred_data.shape) pred_data #fixtures_df pred_data=pd.merge(left=pred_data,right=fixtures_df1,left_on=&#39;team_id&#39;,right_on=&#39;team_h&#39;,how=&#39;left&#39;) pred_data=pd.merge(left=pred_data,right=fixtures_df1,left_on=&#39;team_id&#39;,right_on=&#39;team_a&#39;,how=&#39;left&#39;) pred_data.loc[pred_data[&#39;team_h_x&#39;].isna(),&#39;team_h_x&#39;]=pred_data.loc[pred_data[&#39;team_h_x&#39;].isna(),&#39;team_h_y&#39;] pred_data.loc[pred_data[&#39;team_a_x&#39;].isna(),&#39;team_a_x&#39;]=pred_data.loc[pred_data[&#39;team_a_x&#39;].isna(),&#39;team_a_y&#39;] pred_data=pred_data[[&#39;player_name&#39;,&#39;position&#39;,&#39;team&#39;,&#39;team_id&#39;,&#39;team_h_x&#39;,&#39;team_a_x&#39;,&#39;round&#39;]] pred_data=pred_data.rename(columns={&quot;round&quot;: &quot;gw&quot;,&quot;team_h_x&quot;: &quot;home_team&quot;,&quot;team_a_x&quot;:&quot;away_team&quot;}) # #weekly_data_subset_new=weekly_data_subset[[&#39;player_name&#39;,&#39;gw&#39;,&#39;position&#39;,&#39;team&#39;,&#39;round&#39;,&#39;team_id&#39;,&#39;opponent_id&#39;,&#39;selected&#39;,&#39;was_home&#39;,&#39;home_team&#39;,&#39;away_team&#39;,&#39;proj_score1&#39;,&#39;proj_score2&#39;,&#39;point_flag&#39;]].copy() # #Home Flag pred_data[&#39;was_home&#39;]=0 pred_data.loc[pred_data[&#39;home_team&#39;]==pred_data[&#39;team_id&#39;],&#39;was_home&#39;]=1 #TOBECHANGED pred_data[&#39;gw&#39;]=GW-1 pred_data[&#39;opponent_id&#39;]=0 pred_data[&#39;opponent_id&#39;]=pred_data[&#39;home_team&#39;] pred_data.loc[pred_data[&#39;was_home&#39;]==1,&#39;opponent_id&#39;]=pred_data.loc[pred_data[&#39;was_home&#39;]==1,&#39;away_team&#39;] #pred_data #Rolling means dataset. Take latest available record for a player to account for empty gameweeks or covid cancellations weekly_rolling_means_latest_stats=weekly_rolling_means.sort_values(by=&#39;gw&#39;,ascending=False).groupby(&#39;player_name&#39;).head(1) weekly_rolling_means_latest_stats[&#39;gw&#39;]=max_week pred_data_roll=pd.merge(left=pred_data,right=weekly_rolling_means_latest_stats,left_on=[&#39;player_name&#39;,&#39;gw&#39;],right_on=[&#39;player_name&#39;,&#39;gw&#39;],how=&#39;inner&#39;) # #Merge cumulative means gp_cumsum_latest_stats=gp_cumsum.sort_values(by=&#39;gw&#39;,ascending=False).groupby(&#39;player_name&#39;).head(1) gp_cumsum_latest_stats[&#39;gw&#39;]=max_week pred_data_roll_cum=pd.merge(left=pred_data_roll,right=gp_cumsum_latest_stats,left_on=[&#39;player_name&#39;,&#39;gw&#39;],right_on=[&#39;player_name&#39;,&#39;gw&#39;],how=&#39;inner&#39;) #pred_data_roll_cum # # #Merge team total ranking stats with home team #Calculate latest availalbe team stats for the team. Useful when teams have blank gameweeks and are not playing in the game latest_rank=team_total_data_id.sort_values(by=&#39;gw&#39;,ascending=False).groupby(&#39;id&#39;).head(1) latest_rank[&#39;gw&#39;]=max_week pred_data_roll_cum_team=pd.merge(left=pred_data_roll_cum,right=latest_rank,left_on=[&#39;team_id&#39;,&#39;gw&#39;],right_on=[&#39;id&#39;,&#39;gw&#39;]) pred_data_roll_cum_team=pred_data_roll_cum_team.rename(columns={&quot;rank&quot;: &quot;team_rank&quot;,&#39;cum_pts&#39;:&#39;team_pts&#39;,&#39;xG_diff&#39;:&#39;xG_diff_team&#39;,&#39;scored_diff&#39;:&#39;scored_diff_team&#39;,&#39;deep_diff&#39;:&#39;deep_diff_team&#39;}) # # #Merge team total ranking stats with away team pred_data_roll_cum_team=pd.merge(left=pred_data_roll_cum_team,right=latest_rank,left_on=[&#39;opponent_id&#39;,&#39;gw&#39;],right_on=[&#39;id&#39;,&#39;gw&#39;]) pred_data_roll_cum_team=pred_data_roll_cum_team.rename(columns={&quot;rank&quot;: &quot;opponent_rank&quot;,&#39;cum_pts&#39;:&#39;opponent_points&#39;,&#39;xG_diff&#39;:&#39;xG_diff_opponent&#39;,&#39;scored_diff&#39;:&#39;scored_diff_opponent&#39;,&#39;deep_diff&#39;:&#39;deep_diff_opponent&#39;}) pred_data_roll_cum_team # #Merge team total ranking stats with away team team_gp_latest=team_gp.sort_values(by=&#39;round&#39;,ascending=False).groupby(&#39;team_id&#39;).head(1) team_gp_latest[&#39;round&#39;]=max_week pred_data_roll_cum_team_pts=pd.merge(left=pred_data_roll_cum_team,right=team_gp_latest,left_on=[&#39;team_id&#39;,&#39;gw&#39;],right_on=[&#39;team_id&#39;,&#39;round&#39;],how=&#39;inner&#39;) pred_data_roll_cum_team_pts[&#39;percent_team_points&#39;]=pred_data_roll_cum_team_pts[&#39;total_points&#39;]/pred_data_roll_cum_team_pts[&#39;team_total_points_cumsum&#39;] pred_data_roll_cum_team_pts[&#39;gw&#39;]=max_week+1 pred_data_roll_cum_team_pts_spi=pd.merge(left=pred_data_roll_cum_team_pts,right=spi_data_name_fil,left_on=[&#39;home_team&#39;,&#39;away_team&#39;],right_on=[&#39;home_id&#39;,&#39;away_id&#39;],how=&#39;inner&#39;) # #Calculate rank and projected score differences for the upcoming fixture pred_data_roll_cum_team_pts_spi[&#39;rank_diff&#39;]=pred_data_roll_cum_team_pts_spi[&#39;team_rank&#39;]-pred_data_roll_cum_team_pts_spi[&#39;opponent_rank&#39;] pred_data_roll_cum_team_pts_spi[&#39;proj_score_diff&#39;]=pred_data_roll_cum_team_pts_spi[&#39;proj_score1&#39;]-pred_data_roll_cum_team_pts_spi[&#39;proj_score2&#39;] #pred_data_roll_cum_team_pts_spi . 21 (486, 5) . pred_data_roll_cum_team_pts_spi.shape . (486, 51) . # pred_data_roll.loc[pred_data_roll.influence_roll.isna()] team_gp . team_id round team_total_points_cumsum . 0 1 | 1 | 82 | . 1 1 | 2 | 128 | . 2 1 | 3 | 151 | . 3 1 | 4 | 196 | . 4 1 | 5 | 221 | . ... ... | ... | ... | . 394 20 | 17 | 651 | . 395 20 | 18 | 679 | . 396 20 | 19 | 712 | . 397 20 | 20 | 763 | . 398 20 | 21 | 786 | . 399 rows × 3 columns . pred_data_roll_cum_team_pts_spi[&#39;position_flag&#39;] = labelencoder.fit_transform(pred_data_roll_cum_team_pts_spi[&#39;position&#39;]) cols = pd.get_dummies(pred_data_roll_cum_team_pts_spi[&#39;position_flag&#39;]) cols.columns = [&#39;pos_0&#39;,&#39;pos_1&#39;,&#39;pos_2&#39;,&#39;pos_3&#39;] pred_data_roll_cum_team_pts_spi1 = pd.concat([pred_data_roll_cum_team_pts_spi, cols], axis=1) pred_data_roll_cum_team_pts_spi1 pred_data_roll_cum_team_pts_spi1.drop([&#39;player_name&#39;,&#39;position&#39;,&#39;team&#39;,&#39;team1&#39;,&#39;team2&#39;,&#39;away_id&#39;,&#39;home_id&#39;,&#39;id_x&#39;,&#39;id_y&#39;,&#39;opponent_id&#39;,&#39;team_id&#39;,&#39;round&#39;],axis=1,inplace=True) #Reorder columns in the test data to be in the same order as train data pred_data_roll_cum_team_pts_spi1=pred_data_roll_cum_team_pts_spi1[X_train.columns] proba_rf=model_rf.predict_proba(pred_data_roll_cum_team_pts_spi1) proba_xg=model_xg.predict_proba(pred_data_roll_cum_team_pts_spi1) #pred_data_roll_cum_team_pts_spi[&#39;predicted&#39;]=proba_rf[:,1] #pred_data_roll_cum_team_pts_spi[&#39;predicted&#39;]=proba_xg[:,1] pred_data_roll_cum_team_pts_spi[&#39;predicted&#39;]=0.7*proba_rf[:,1]+0.3*proba_xg[:,1] . pred_data_roll_cum_team_pts_spi.team.unique() . array([&#39;Brighton&#39;, &#39;Liverpool&#39;, &#39;West Ham&#39;, &#39;Aston Villa&#39;, &#39;Sheffield Utd&#39;, &#39;West Brom&#39;, &#39;Man Utd&#39;, &#39;Southampton&#39;, &#39;Everton&#39;, &#39;Leeds&#39;, &#39;Fulham&#39;, &#39;Leicester&#39;, &#39;Wolves&#39;, &#39;Arsenal&#39;, &#39;Newcastle&#39;, &#39;Crystal Palace&#39;, &#39;Chelsea&#39;, &#39;Spurs&#39;, &#39;Burnley&#39;, &#39;Man City&#39;], dtype=object) . pred_data_roll_cum_team_pts_spi.sort_values(by=&#39;predicted&#39;,ascending=False).head(15) . player_name position team team_id home_team away_team gw was_home opponent_id influence_roll creativity_roll threat_roll ict_index_roll minutes_roll selected_roll total_points_roll red_cards yellow_cards xP total_points bonus clean_sheets assists minutes influence creativity threat ict_index team_pts id_x team_rank xG_diff_team deep_diff_team scored_diff_team opponent_points id_y opponent_rank xG_diff_opponent deep_diff_opponent scored_diff_opponent round team_total_points_cumsum percent_team_points team1 team2 home_id away_id proj_score1 proj_score2 rank_diff proj_score_diff position_flag predicted . 466 Ederson Santana de Moraes | GK | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 13.740000 | 0.000000 | 0.000000 | 1.380000 | 85.500000 | 4.609512e+05 | 4.400000 | 0 | 1 | 110.1 | 88 | 1 | 12 | 0 | 1710 | 274.8 | 0.0 | 0.0 | 27.6 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.077601 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 2 | 0.730635 | . 471 Ilkay Gündogan | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 19.790000 | 17.685000 | 16.500000 | 5.400000 | 56.250000 | 1.693185e+05 | 4.150000 | 0 | 0 | 104.5 | 83 | 12 | 9 | 0 | 1125 | 395.8 | 353.7 | 330.0 | 108.0 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.073192 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.690731 | . 481 Riyad Mahrez | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 15.350000 | 21.205000 | 22.650000 | 5.915000 | 47.100000 | 3.575458e+05 | 3.500000 | 0 | 0 | 101.7 | 70 | 7 | 7 | 2 | 942 | 307.0 | 424.1 | 453.0 | 118.3 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.061728 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.688607 | . 244 Ademola Lookman | MID | Fulham | 8 | 8.0 | 9.0 | 22 | 1 | 9.0 | 20.341176 | 22.500000 | 31.647059 | 7.447059 | 81.764706 | 6.473088e+04 | 3.529412 | 0 | 3 | 59.3 | 60 | 5 | 4 | 3 | 1390 | 345.8 | 382.5 | 538.0 | 126.6 | 14 | 8 | 14.0 | -0.535142 | 0.414847 | 0.369565 | 39 | 9 | 4.0 | 0.349518 | 0.556034 | 0.596774 | 21 | 671 | 0.089419 | Fulham | Leicester City | 8 | 9 | 0.97 | 1.54 | 10.0 | -0.57 | 3 | 0.667287 | . 473 João Pedro Cavaco Cancelo | DEF | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 16.610000 | 21.850000 | 9.850000 | 4.835000 | 63.950000 | 4.679078e+05 | 4.300000 | 0 | 3 | 104.4 | 86 | 13 | 9 | 2 | 1279 | 332.2 | 437.0 | 197.0 | 96.7 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.075838 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 0 | 0.666357 | . 320 Bukayo Saka | MID | Arsenal | 1 | 20.0 | 1.0 | 22 | 0 | 20.0 | 17.828571 | 18.304762 | 30.714286 | 6.685714 | 71.571429 | 3.791516e+05 | 3.857143 | 0 | 0 | 77.1 | 81 | 8 | 6 | 3 | 1503 | 374.4 | 384.4 | 645.0 | 140.4 | 31 | 1 | 8.0 | 0.226947 | 0.570370 | 0.565217 | 23 | 20 | 11.0 | -0.343772 | 0.346320 | 0.411765 | 21 | 929 | 0.087191 | Wolverhampton | Arsenal | 20 | 1 | 1.06 | 1.35 | -3.0 | -0.29 | 3 | 0.627423 | . 482 Rodrigo Hernandez | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 15.350000 | 14.055000 | 9.300000 | 3.875000 | 77.100000 | 3.570875e+04 | 2.300000 | 0 | 3 | 71.5 | 46 | 3 | 8 | 1 | 1542 | 307.0 | 281.1 | 186.0 | 77.5 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.040564 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.615653 | . 390 Wilfried Zaha | MID | Crystal Palace | 6 | 14.0 | 6.0 | 22 | 0 | 14.0 | 19.638095 | 12.276190 | 33.333333 | 6.528571 | 76.666667 | 1.450886e+06 | 4.809524 | 0 | 4 | 96.3 | 101 | 11 | 4 | 3 | 1610 | 412.4 | 257.8 | 700.0 | 137.1 | 26 | 6 | 10.0 | -0.501680 | 0.484375 | 0.409836 | 22 | 14 | 12.0 | -0.572762 | 0.290076 | 0.381818 | 21 | 786 | 0.128499 | Newcastle | Crystal Palace | 14 | 6 | 1.25 | 1.07 | -2.0 | 0.18 | 3 | 0.599962 | . 96 Aaron Ramsdale | GK | Sheffield Utd | 15 | 15.0 | 18.0 | 22 | 1 | 18.0 | 22.876190 | 0.476190 | 0.190476 | 2.352381 | 90.000000 | 2.368946e+05 | 2.523810 | 0 | 1 | 46.3 | 53 | 2 | 1 | 0 | 1890 | 480.4 | 10.0 | 4.0 | 49.4 | 8 | 15 | 16.0 | -0.550331 | 0.437037 | 0.260870 | 12 | 18 | 15.0 | -1.425397 | 0.277567 | 0.253731 | 21 | 540 | 0.098148 | Sheffield United | West Bromwich Albion | 15 | 18 | 1.52 | 0.81 | 1.0 | 0.71 | 2 | 0.590660 | . 480 Raheem Sterling | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 19.280000 | 15.505000 | 40.200000 | 7.490000 | 71.900000 | 4.356275e+05 | 4.850000 | 0 | 1 | 122.4 | 97 | 9 | 9 | 6 | 1438 | 385.6 | 310.1 | 804.0 | 149.8 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.085538 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.584465 | . 472 John Stones | DEF | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 13.160000 | 1.815000 | 4.300000 | 1.925000 | 49.500000 | 3.379436e+05 | 3.850000 | 0 | 0 | 112.5 | 77 | 7 | 9 | 0 | 990 | 263.2 | 36.3 | 86.0 | 38.5 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.067901 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 0 | 0.581161 | . 277 James Maddison | MID | Leicester | 9 | 8.0 | 9.0 | 22 | 0 | 8.0 | 18.495238 | 25.485714 | 17.285714 | 6.119048 | 61.476190 | 3.354671e+05 | 4.238095 | 0 | 3 | 103.6 | 89 | 7 | 7 | 5 | 1291 | 388.4 | 535.2 | 363.0 | 128.5 | 39 | 9 | 4.0 | 0.349518 | 0.556034 | 0.596774 | 14 | 8 | 14.0 | -0.535142 | 0.414847 | 0.369565 | 21 | 944 | 0.094280 | Fulham | Leicester City | 8 | 9 | 0.97 | 1.54 | -10.0 | -0.57 | 3 | 0.564810 | . 53 Aaron Cresswell | DEF | West Ham | 19 | 2.0 | 19.0 | 22 | 0 | 2.0 | 19.685714 | 23.147619 | 2.523810 | 4.547619 | 90.000000 | 7.535033e+05 | 4.571429 | 0 | 0 | 103.4 | 96 | 11 | 7 | 8 | 1890 | 413.4 | 486.1 | 53.0 | 95.5 | 35 | 19 | 5.0 | 0.238656 | 0.384314 | 0.534483 | 32 | 2 | 7.0 | 0.661975 | 0.511945 | 0.618182 | 21 | 947 | 0.101373 | Aston Villa | West Ham United | 2 | 19 | 1.66 | 1.23 | -2.0 | 0.43 | 0 | 0.561478 | . 83 Jack Grealish | MID | Aston Villa | 2 | 2.0 | 19.0 | 22 | 1 | 19.0 | 32.894737 | 45.036842 | 43.105263 | 12.094737 | 89.842105 | 2.477127e+06 | 6.263158 | 0 | 4 | 118.7 | 119 | 12 | 10 | 11 | 1707 | 625.0 | 855.7 | 819.0 | 229.8 | 32 | 2 | 7.0 | 0.661975 | 0.511945 | 0.618182 | 35 | 19 | 5.0 | 0.238656 | 0.384314 | 0.534483 | 21 | 984 | 0.120935 | Aston Villa | West Ham United | 2 | 19 | 1.66 | 1.23 | 2.0 | 0.43 | 3 | 0.549574 | . 319 Bernd Leno | GK | Arsenal | 1 | 20.0 | 1.0 | 22 | 0 | 20.0 | 20.819048 | 0.000000 | 0.000000 | 2.080952 | 90.000000 | 6.512634e+05 | 4.238095 | 0 | 0 | 92.6 | 89 | 6 | 8 | 0 | 1890 | 437.2 | 0.0 | 0.0 | 43.7 | 31 | 1 | 8.0 | 0.226947 | 0.570370 | 0.565217 | 23 | 20 | 11.0 | -0.343772 | 0.346320 | 0.411765 | 21 | 929 | 0.095802 | Wolverhampton | Arsenal | 20 | 1 | 1.06 | 1.35 | -3.0 | -0.29 | 2 | 0.547207 | . players_df_100=players_df.loc[(players_df[&#39;chance_of_playing_next_round&#39;]!=0)&amp;(players_df[&#39;chance_of_playing_next_round&#39;]!=75)&amp;(players_df[&#39;chance_of_playing_next_round&#39;]!=25)&amp;(players_df[&#39;chance_of_playing_next_round&#39;]!=50)] players_df_100=players_df_100[[&#39;first_name&#39;,&#39;second_name&#39;,&#39;photo&#39;,&#39;code&#39;,&#39;team&#39;]] #players_df_100 players_df_100[&#39;web_name&#39;]=players_df_100[&#39;first_name&#39;]+&#39; &#39;+players_df_100[&#39;second_name&#39;] pred_data_roll_cum_team_pts_spi_100=pd.merge(left=pred_data_roll_cum_team_pts_spi,right=players_df_100,left_on=[&#39;player_name&#39;,&#39;team_id&#39;],right_on=[&#39;web_name&#39;,&#39;team&#39;],how=&#39;inner&#39;) del pred_data_roll_cum_team_pts_spi_100[&#39;team_y&#39;] pred_data_roll_cum_team_pts_spi_100 . player_name position team_x team_id home_team away_team gw was_home opponent_id influence_roll creativity_roll threat_roll ict_index_roll minutes_roll selected_roll total_points_roll red_cards yellow_cards xP total_points bonus clean_sheets assists minutes influence creativity threat ict_index team_pts id_x team_rank xG_diff_team deep_diff_team scored_diff_team opponent_points id_y opponent_rank xG_diff_opponent deep_diff_opponent scored_diff_opponent round team_total_points_cumsum percent_team_points team1 team2 home_id away_id proj_score1 proj_score2 rank_diff proj_score_diff position_flag predicted first_name second_name photo code web_name . 0 Aaron Connolly | FWD | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 4.704762 | 2.890476 | 11.190476 | 1.871429 | 27.952381 | 35626.095238 | 1.476190 | 0 | 0 | 26.8 | 31 | 2 | 1 | 1 | 587 | 98.8 | 60.7 | 235.0 | 39.3 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.038750 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 1 | 0.134720 | Aaron | Connolly | 233425.jpg | 233425 | Aaron Connolly | . 1 Adam Lallana | MID | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 4.800000 | 9.390476 | 5.571429 | 1.957143 | 36.904762 | 32346.238095 | 1.333333 | 0 | 0 | 20.3 | 28 | 0 | 3 | 1 | 775 | 100.8 | 197.2 | 117.0 | 41.1 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.035000 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 3 | 0.169970 | Adam | Lallana | 39155.jpg | 39155 | Adam Lallana | . 2 Adam Webster | DEF | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 14.809524 | 3.742857 | 9.619048 | 2.814286 | 85.714286 | 138536.428571 | 2.523810 | 0 | 3 | 41.5 | 53 | 0 | 6 | 0 | 1800 | 311.0 | 78.6 | 202.0 | 59.1 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.066250 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 0 | 0.248905 | Adam | Webster | 110735.jpg | 110735 | Adam Webster | . 3 Andi Zeqiri | FWD | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 0.023529 | 0.300000 | 3.705882 | 0.400000 | 3.705882 | 3268.647059 | 0.117647 | 0 | 0 | 1.6 | 2 | 0 | 0 | 0 | 63 | 0.4 | 5.1 | 63.0 | 6.8 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.002500 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 1 | 0.049812 | Andi | Zeqiri | 204676.jpg | 204676 | Andi Zeqiri | . 4 Ben White | DEF | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 13.114286 | 5.695238 | 3.000000 | 2.190476 | 83.761905 | 97500.333333 | 2.619048 | 0 | 2 | 41.7 | 55 | 2 | 6 | 0 | 1759 | 275.4 | 119.6 | 63.0 | 46.0 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.068750 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 0 | 0.237101 | Ben | White | 198869.jpg | 198869 | Ben White | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 365 Raheem Sterling | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 19.280000 | 15.505000 | 40.200000 | 7.490000 | 71.900000 | 435627.550000 | 4.850000 | 0 | 1 | 122.4 | 97 | 9 | 9 | 6 | 1438 | 385.6 | 310.1 | 804.0 | 149.8 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.085538 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.584465 | Raheem | Sterling | 103955.jpg | 103955 | Raheem Sterling | . 366 Riyad Mahrez | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 15.350000 | 21.205000 | 22.650000 | 5.915000 | 47.100000 | 357545.800000 | 3.500000 | 0 | 0 | 101.7 | 70 | 7 | 7 | 2 | 942 | 307.0 | 424.1 | 453.0 | 118.3 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.061728 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.688607 | Riyad | Mahrez | 103025.jpg | 103025 | Riyad Mahrez | . 367 Rodrigo Hernandez | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 15.350000 | 14.055000 | 9.300000 | 3.875000 | 77.100000 | 35708.750000 | 2.300000 | 0 | 3 | 71.5 | 46 | 3 | 8 | 1 | 1542 | 307.0 | 281.1 | 186.0 | 77.5 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.040564 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.615653 | Rodrigo | Hernandez | 220566.jpg | 220566 | Rodrigo Hernandez | . 368 Rúben Santos Gato Alves Dias | DEF | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 20.033333 | 1.788889 | 9.111111 | 3.100000 | 88.833333 | 451309.166667 | 5.055556 | 0 | 2 | 118.4 | 91 | 9 | 12 | 1 | 1599 | 360.6 | 32.2 | 164.0 | 55.8 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.080247 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 0 | 0.536733 | Rúben Santos | Gato Alves Dias | 171314.jpg | 171314 | Rúben Santos Gato Alves Dias | . 369 Zack Steffen | GK | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 0.480000 | 0.000000 | 0.000000 | 0.050000 | 4.500000 | 5586.100000 | 0.100000 | 0 | 0 | 27.1 | 2 | 0 | 0 | 0 | 90 | 9.6 | 0.0 | 0.0 | 1.0 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.001764 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 2 | 0.028291 | Zack | Steffen | 164484.jpg | 164484 | Zack Steffen | . 370 rows × 58 columns . players_df.loc[players_df[&#39;web_name&#39;]==&#39;Kane&#39;] . chance_of_playing_next_round chance_of_playing_this_round code cost_change_event cost_change_event_fall cost_change_start cost_change_start_fall dreamteam_count element_type ep_next ep_this event_points first_name form id in_dreamteam news news_added now_cost photo points_per_game second_name selected_by_percent special squad_number status team team_code total_points transfers_in transfers_in_event transfers_out transfers_out_event value_form value_season web_name minutes goals_scored assists clean_sheets goals_conceded own_goals penalties_saved penalties_missed yellow_cards red_cards saves bonus bps influence creativity threat ict_index influence_rank influence_rank_type creativity_rank creativity_rank_type threat_rank threat_rank_type ict_index_rank ict_index_rank_type corners_and_indirect_freekicks_order corners_and_indirect_freekicks_text direct_freekicks_order direct_freekicks_text penalties_order penalties_text . 519 0.0 | 0.0 | 78830 | -1 | 1 | 6 | -6 | 6 | 4 | 0.0 | 0.0 | 0 | Harry | 4.5 | 388 | True | Ankle injury - Unknown return date | 2021-01-28T23:00:26.163676Z | 111 | 78830.jpg | 7.5 | Kane | 22.9 | False | None | i | 17 | 6 | 143 | 4479590 | 2439 | 4187537 | 650925 | 0.4 | 12.9 | Kane | 1654 | 12 | 11 | 6 | 17 | 0 | 0 | 0 | 1 | 0 | 0 | 26 | 512 | 763.4 | 371.2 | 792.0 | 192.4 | 2 | 1 | 28 | 1 | 9 | 5 | 5 | 1 | NaN | | 1.0 | | 1.0 | | . from google.colab import files pred_data_roll_cum_team_pts_spi_100.to_csv(&#39;pred.csv&#39;) files.download(&#39;pred.csv&#39;) . # team_list=[] # gk=pred_data_roll_cum_team_pts_spi.loc[pred_data_roll_cum_team_pts_spi[&#39;position&#39;]==&#39;GK&#39;,[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;gw&#39;]].head(1) # team_list.append(gk) # defender=pred_data_roll_cum_team_pts_spi.loc[pred_data_roll_cum_team_pts_spi[&#39;position&#39;]==&#39;DEF&#39;,[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;gw&#39;]].head(3) # team_list.append(defender) # midfielder=pred_data_roll_cum_team_pts_spi.loc[pred_data_roll_cum_team_pts_spi[&#39;position&#39;]==&#39;MID&#39;,[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;gw&#39;]].head(4) # team_list.append(midfielder) # forward=pred_data_roll_cum_team_pts_spi.loc[pred_data_roll_cum_team_pts_spi[&#39;position&#39;]==&#39;FWD&#39;,[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;gw&#39;]].head(3) # team_list.append(forward) # team_list . pred_data_roll_cum_team_pts_spi_100.sort_values(by=&#39;predicted&#39;,ascending=False,inplace=True) pred_data_roll_cum_team_pts_spi_100[&#39;team&#39;]=pred_data_roll_cum_team_pts_spi_100[&#39;team_x&#39;] team_list=pred_data_roll_cum_team_pts_spi_100.team.unique() team_frame=pd.DataFrame({&#39;team&#39;:team_list}) team_frame[&#39;count&#39;]=0 loop_df=pred_data_roll_cum_team_pts_spi_100[[&#39;player_name&#39;,&#39;position&#39;,&#39;team&#39;]] loop_df=loop_df.reset_index(drop=True) #loop_df form=[1,3,4,3] form_type=[&#39;GK&#39;,&#39;DEF&#39;,&#39;MID&#39;,&#39;FWD&#39;] player_list=[] k=0 j=0 for i in range(4): j=0 # for j in range(form[i]): while True: temp=loop_df.loc[loop_df.position==form_type[i]].head(1) team_name=temp.iloc[0][&#39;team&#39;] player=temp.iloc[0][&#39;player_name&#39;] #print(player,team_name) team_frame.loc[team_frame.team==team_name,&#39;count&#39;]=team_frame.loc[team_frame.team==team_name,&#39;count&#39;]+1 chk= team_frame.loc[team_frame.team==team_name] cnt=chk.iloc[0][&#39;count&#39;] # print(player) # print(cnt) if cnt&lt;=3: player_list.append(player) else : j=j-1 loop_df=loop_df.loc[loop_df.player_name!=player] j=j+1 if(j&gt;=form[i]): break # print(j) # loop_df=loop_df.drop(loop_df.head(1).index) # loop_df=loop_df.reset_index(drop=True) player_list . [&#39;Ederson Santana de Moraes&#39;, &#39;João Pedro Cavaco Cancelo&#39;, &#39;John Stones&#39;, &#39;Aaron Cresswell&#39;, &#39;Ademola Lookman&#39;, &#39;Wilfried Zaha&#39;, &#39;James Maddison&#39;, &#39;Jack Grealish&#39;, &#39;Ollie Watkins&#39;, &#39;Callum Wilson&#39;, &#39;Dominic Calvert-Lewin&#39;] . output=pred_data_roll_cum_team_pts_spi_100.loc[pred_data_roll_cum_team_pts_spi_100.player_name.isin(player_list)] output=output[[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;gw&#39;]] output . player_name position team_id gw . 353 Ederson Santana de Moraes | GK | 12 | 22 | . 182 Ademola Lookman | MID | 8 | 22 | . 360 João Pedro Cavaco Cancelo | DEF | 12 | 22 | . 289 Wilfried Zaha | MID | 6 | 22 | . 359 John Stones | DEF | 12 | 22 | . 209 James Maddison | MID | 9 | 22 | . 36 Aaron Cresswell | DEF | 19 | 22 | . 60 Jack Grealish | MID | 2 | 22 | . 69 Ollie Watkins | FWD | 2 | 22 | . 255 Callum Wilson | FWD | 14 | 22 | . 155 Dominic Calvert-Lewin | FWD | 7 | 22 | . Optimization . !pip install pulp . Requirement already satisfied: pulp in /usr/local/lib/python3.6/dist-packages (2.4) Requirement already satisfied: amply&gt;=0.1.2 in /usr/local/lib/python3.6/dist-packages (from pulp) (0.1.4) Requirement already satisfied: docutils&gt;=0.3 in /usr/local/lib/python3.6/dist-packages (from amply&gt;=0.1.2-&gt;pulp) (0.16) Requirement already satisfied: pyparsing in /usr/local/lib/python3.6/dist-packages (from amply&gt;=0.1.2-&gt;pulp) (2.4.7) . # import pulp # def select_team(expected_scores, prices, positions, clubs, total_budget=1000, sub_factor=0.2): # num_players = len(expected_scores) # print(num_players) # model = pulp.LpProblem(&quot;Constrained value maximisation&quot;, pulp.LpMaximize) # decisions = [ # pulp.LpVariable(&quot;x{}&quot;.format(i), lowBound=0, upBound=1, cat=&#39;Integer&#39;) # for i in range(num_players) # ] # captain_decisions = [ # pulp.LpVariable(&quot;y{}&quot;.format(i), lowBound=0, upBound=1, cat=&#39;Integer&#39;) # for i in range(num_players) # ] # sub_decisions = [ # pulp.LpVariable(&quot;z{}&quot;.format(i), lowBound=0, upBound=1, cat=&#39;Integer&#39;) # for i in range(num_players) # ] # # objective function: # model += sum((captain_decisions[i] + decisions[i] + sub_decisions[i]*sub_factor) * expected_scores[i] # for i in range(num_players)), &quot;Objective&quot; # # cost constraint # model += sum((decisions[i] + sub_decisions[i]) * prices[i] for i in range(num_players)) &lt;= total_budget # total cost # # position constraints # # 1 starting goalkeeper # model += sum(decisions[i] for i in range(num_players) if positions[i] == 1) == 1 # # 2 total goalkeepers # model += sum(decisions[i] + sub_decisions[i] for i in range(num_players) if positions[i] == 1) == 2 # # 3-5 starting defenders # model += sum(decisions[i] for i in range(num_players) if positions[i] == 2) &gt;= 3 # model += sum(decisions[i] for i in range(num_players) if positions[i] == 2) &lt;= 5 # # 5 total defenders # model += sum(decisions[i] + sub_decisions[i] for i in range(num_players) if positions[i] == 2) == 5 # # 3-5 starting midfielders # model += sum(decisions[i] for i in range(num_players) if positions[i] == 3) &gt;= 3 # model += sum(decisions[i] for i in range(num_players) if positions[i] == 3) &lt;= 5 # # 5 total midfielders # model += sum(decisions[i] + sub_decisions[i] for i in range(num_players) if positions[i] == 3) == 5 # # 1-3 starting attackers # model += sum(decisions[i] for i in range(num_players) if positions[i] == 4) &gt;= 1 # model += sum(decisions[i] for i in range(num_players) if positions[i] == 4) &lt;= 3 # # 3 total attackers # model += sum(decisions[i] + sub_decisions[i] for i in range(num_players) if positions[i] == 4) == 3 # # club constraint # for club_id in np.unique(clubs): # model += sum(decisions[i] + sub_decisions[i] for i in range(num_players) if clubs[i] == club_id) &lt;= 3 # max 3 players # model += sum(decisions) == 11 # total team size # model += sum(captain_decisions) == 1 # 1 captain # for i in range(num_players): # model += (decisions[i] - captain_decisions[i]) &gt;= 0 # captain must also be on team # model += (decisions[i] + sub_decisions[i]) &lt;= 1 # subs must not be on team # model.solve() # print(&quot;Total expected score = {}&quot;.format(model.objective.value())) # return decisions, captain_decisions, sub_decisions . cost_df=players_df[[&#39;now_cost&#39;,&#39;first_name&#39;,&#39;second_name&#39;]].copy() cost_df[&#39;web_name&#39;]=cost_df[&#39;first_name&#39;]+&#39; &#39;+cost_df[&#39;second_name&#39;] #cost_df pred_data_roll_cum_team_pts_spi_cost=pd.merge(left=pred_data_roll_cum_team_pts_spi,right=cost_df,left_on=[&#39;player_name&#39;],right_on=[&#39;web_name&#39;],how=&#39;inner&#39;) pred_data_roll_cum_team_pts_spi_cost # expected_scores=pred_data_roll_cum_team_pts_spi_cost[&#39;predicted&#39;] # prices=pred_data_roll_cum_team_pts_spi_cost[&#39;now_cost&#39;] # positions=pred_data_roll_cum_team_pts_spi_cost[&#39;position&#39;] # clubs=pred_data_roll_cum_team_pts_spi_cost[&#39;team_id&#39;] # decision,captain_decision,sub_decisions=select_team(expected_scores.values, prices.values, positions.values, clubs.values, total_budget=100,sub_factor=0.2) # #expected_scores.values . player_name position team team_id home_team away_team gw was_home opponent_id influence_roll creativity_roll threat_roll ict_index_roll minutes_roll selected_roll total_points_roll red_cards yellow_cards xP total_points bonus clean_sheets assists minutes influence creativity threat ict_index team_pts id_x team_rank xG_diff_team deep_diff_team scored_diff_team opponent_points id_y opponent_rank xG_diff_opponent deep_diff_opponent scored_diff_opponent round team_total_points_cumsum percent_team_points team1 team2 home_id away_id proj_score1 proj_score2 rank_diff proj_score_diff position_flag predicted now_cost first_name second_name web_name . 0 Aaron Connolly | FWD | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 4.704762 | 2.890476 | 11.190476 | 1.871429 | 27.952381 | 35626.095238 | 1.476190 | 0 | 0 | 26.8 | 31 | 2 | 1 | 1 | 587 | 98.8 | 60.7 | 235.0 | 39.3 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.038750 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 1 | 0.134720 | 52 | Aaron | Connolly | Aaron Connolly | . 1 Adam Lallana | MID | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 4.800000 | 9.390476 | 5.571429 | 1.957143 | 36.904762 | 32346.238095 | 1.333333 | 0 | 0 | 20.3 | 28 | 0 | 3 | 1 | 775 | 100.8 | 197.2 | 117.0 | 41.1 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.035000 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 3 | 0.169970 | 62 | Adam | Lallana | Adam Lallana | . 2 Adam Webster | DEF | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 14.809524 | 3.742857 | 9.619048 | 2.814286 | 85.714286 | 138536.428571 | 2.523810 | 0 | 3 | 41.5 | 53 | 0 | 6 | 0 | 1800 | 311.0 | 78.6 | 202.0 | 59.1 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.066250 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 0 | 0.248905 | 44 | Adam | Webster | Adam Webster | . 3 Alexis Mac Allister | MID | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 4.961905 | 4.876190 | 4.333333 | 1.409524 | 21.428571 | 3277.619048 | 1.285714 | 0 | 1 | 20.1 | 27 | 3 | 3 | 1 | 450 | 104.2 | 102.4 | 91.0 | 29.6 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.033750 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 3 | 0.132521 | 53 | Alexis | Mac Allister | Alexis Mac Allister | . 4 Alireza Jahanbakhsh | MID | Brighton | 3 | 11.0 | 3.0 | 22 | 0 | 11.0 | 2.447619 | 4.500000 | 6.809524 | 1.371429 | 11.857143 | 2905.714286 | 0.619048 | 0 | 2 | 8.2 | 13 | 0 | 0 | 1 | 249 | 51.4 | 94.5 | 143.0 | 28.8 | 21 | 3 | 13.0 | 0.305884 | 0.611722 | 0.442308 | 40 | 11 | 3.0 | 0.805659 | 0.804217 | 0.641791 | 21 | 800 | 0.016250 | Liverpool | Brighton and Hove Albion | 11 | 3 | 2.09 | 0.77 | 10.0 | 1.32 | 3 | 0.100761 | 54 | Alireza | Jahanbakhsh | Alireza Jahanbakhsh | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 481 Riyad Mahrez | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 15.350000 | 21.205000 | 22.650000 | 5.915000 | 47.100000 | 357545.800000 | 3.500000 | 0 | 0 | 101.7 | 70 | 7 | 7 | 2 | 942 | 307.0 | 424.1 | 453.0 | 118.3 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.061728 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.688607 | 81 | Riyad | Mahrez | Riyad Mahrez | . 482 Rodrigo Hernandez | MID | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 15.350000 | 14.055000 | 9.300000 | 3.875000 | 77.100000 | 35708.750000 | 2.300000 | 0 | 3 | 71.5 | 46 | 3 | 8 | 1 | 1542 | 307.0 | 281.1 | 186.0 | 77.5 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.040564 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 3 | 0.615653 | 53 | Rodrigo | Hernandez | Rodrigo Hernandez | . 483 Rúben Santos Gato Alves Dias | DEF | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 20.033333 | 1.788889 | 9.111111 | 3.100000 | 88.833333 | 451309.166667 | 5.055556 | 0 | 2 | 118.4 | 91 | 9 | 12 | 1 | 1599 | 360.6 | 32.2 | 164.0 | 55.8 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.080247 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 0 | 0.536733 | 60 | Rúben Santos | Gato Alves Dias | Rúben Santos Gato Alves Dias | . 484 Sergio Agüero | FWD | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 0.360000 | 1.845000 | 3.250000 | 0.520000 | 7.000000 | 113363.150000 | 0.300000 | 0 | 0 | 9.6 | 6 | 0 | 1 | 0 | 140 | 7.2 | 36.9 | 65.0 | 10.4 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.005291 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 1 | 0.055155 | 103 | Sergio | Agüero | Sergio Agüero | . 485 Zack Steffen | GK | Man City | 12 | 4.0 | 12.0 | 22 | 0 | 4.0 | 0.480000 | 0.000000 | 0.000000 | 0.050000 | 4.500000 | 5586.100000 | 0.100000 | 0 | 0 | 27.1 | 2 | 0 | 0 | 0 | 90 | 9.6 | 0.0 | 0.0 | 1.0 | 44 | 12 | 1.0 | 1.294208 | 0.750865 | 0.740000 | 22 | 4 | 12.0 | -0.713549 | 0.336770 | 0.333333 | 21 | 1134 | 0.001764 | Burnley | Manchester City | 4 | 12 | 0.49 | 2.25 | -11.0 | -1.76 | 2 | 0.028291 | 44 | Zack | Steffen | Zack Steffen | . 486 rows × 57 columns . . #output=pd.concat(team_list) output[&#39;web_name&#39;] = output[&#39;player_name&#39;].str.split(&#39; &#39;).str[1] player_photo=players_df[[&#39;first_name&#39;,&#39;second_name&#39;,&#39;photo&#39;,&#39;code&#39;,&#39;team&#39;]].copy() player_photo[&#39;web_name&#39;]=player_photo[&#39;first_name&#39;]+&#39; &#39;+player_photo[&#39;second_name&#39;] player_photo output_join=pd.merge(left=output,right=player_photo,left_on=[&#39;player_name&#39;,&#39;team_id&#39;],right_on=[&#39;web_name&#39;,&#39;team&#39;],how=&#39;left&#39;) output_join=output_join[[&#39;player_name&#39;,&#39;position&#39;,&#39;photo&#39;,&#39;gw&#39;]] output_join[&#39;new_photo&#39;]=output_join[&#39;photo&#39;].str.split(&#39;.&#39;).str[0] del output_join[&#39;photo&#39;] #files.download(&#39;output.csv&#39;) #output_join custom_dict = {&#39;GK&#39;: 0, &#39;DEF&#39;: 1, &#39;MID&#39;: 2, &#39;FWD&#39;: 3} output_join.sort_values(by=[&#39;position&#39;], key=lambda x: x.map(custom_dict),inplace=True) output_join.to_csv(&#39;output.csv&#39;,index=False) . output_file=pd.read_csv(&#39;https://raw.githubusercontent.com/arpitsolanki/FPLBot/main/output.csv&#39;) # output_file final_output=output_join.append(output_file, ignore_index=True) final_output.to_csv(&#39;output.csv&#39;,index=False) files.download(&#39;output.csv&#39;) . last_gw_team=output_file.loc[output_file.gw==GW-1] #last_gw_team=output_file.loc[output_file.gw==17] last_gw_team weekly_data_last=weekly_data_team[[&#39;player_name&#39;,&#39;total_points&#39;,&#39;team_id&#39;,&#39;gw&#39;,&#39;position&#39;]] weekly_data_last=weekly_data_last.loc[weekly_data_last.gw==GW-1] #weekly_data_last=weekly_data_last.loc[weekly_data_last.gw==17] last_gw_team_pts=pd.merge(left=last_gw_team,right=weekly_data_last,left_on=[&#39;player_name&#39;,&#39;gw&#39;,&#39;position&#39;],right_on=[&#39;player_name&#39;,&#39;gw&#39;,&#39;position&#39;],how=&#39;inner&#39;) last_gw_team_pts last_gw_team_pts_old=pd.read_csv(&#39;https://raw.githubusercontent.com/arpitsolanki/FPLBot/main/gw_points_history.csv&#39;) # output_file last_gw_team_pts=last_gw_team_pts_old.append(last_gw_team_pts, ignore_index=True) del last_gw_team_pts[&#39;team_id&#39;] last_gw_team_pts.to_csv(&#39;gw_points_history.csv&#39;,index=False) files.download(&#39;gw_points_history.csv&#39;) #Dream Team past GW weekly_data_last.sort_values(by=[&#39;total_points&#39;],ascending=False,inplace=True) weekly_data_last.head(10) dream_team_list=[] gk=weekly_data_last.loc[weekly_data_last[&#39;position&#39;]==&#39;GK&#39;,[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;total_points&#39;]].head(1) dream_team_list.append(gk) defender=weekly_data_last.loc[weekly_data_last[&#39;position&#39;]==&#39;DEF&#39;,[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;total_points&#39;]].head(3) dream_team_list.append(defender) midfielder=weekly_data_last.loc[weekly_data_last[&#39;position&#39;]==&#39;MID&#39;,[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;total_points&#39;]].head(4) dream_team_list.append(midfielder) forward=weekly_data_last.loc[weekly_data_last[&#39;position&#39;]==&#39;FWD&#39;,[&#39;player_name&#39;,&#39;position&#39;,&#39;team_id&#39;,&#39;total_points&#39;]].head(3) dream_team_list.append(forward) last_gw_dream_team=pd.concat(dream_team_list) last_gw_dream_team.to_csv(&#39;last_gw_dream_team.csv&#39;,index=False) last_gw_dream_team=pd.merge(left=last_gw_dream_team,right=player_photo,left_on=[&#39;player_name&#39;,&#39;team_id&#39;],right_on=[&#39;web_name&#39;,&#39;team&#39;],how=&#39;left&#39;) last_gw_dream_team[&#39;new_photo&#39;]=last_gw_dream_team[&#39;code&#39;] last_gw_dream_team=last_gw_dream_team[[&#39;player_name&#39;,&#39;position&#39;,&#39;new_photo&#39;,&#39;total_points&#39;]] last_gw_dream_team files.download(&#39;last_gw_dream_team.csv&#39;) . avg_score_df=events_df.loc[events_df.id&lt;=GW] avg_score_df=avg_score_df[[&#39;id&#39;,&#39;average_entry_score&#39;]] avg_score_df.to_csv(&#39;avg_score_df.csv&#39;,index=False) files.download(&#39;avg_score_df.csv&#39;) . # img=output_join.iloc[0,2] # img_path=&#39;https://resources.premierleague.com/premierleague/photos/players/110x140/p&#39;+img+&#39;.png&#39; # print(img_path) # from skimage import io # io.imshow(io.imread(img_path)) # #io.show() #import plotly import skimage #skimage.io.show() #from skimage import io print(seaborn.__version__) . 0.11.1 .",
            "url": "https://arpitsolanki.github.io/fastpagetest/2020/02/01/Fantasy-League.html",
            "relUrl": "/2020/02/01/Fantasy-League.html",
            "date": " • Feb 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://arpitsolanki.github.io/fastpagetest/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://arpitsolanki.github.io/fastpagetest/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://arpitsolanki.github.io/fastpagetest/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}